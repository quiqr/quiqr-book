'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/20-quiqr-developer-reference/01-anatomy-of-quiqr-site/',title:"Anatomy of a Quiqr Site",section:"Quiqr CMS Developer Reference",content:"Anatomy of a Quiqr Site #  Quiqr Data Directory #  Quiqr stores it\u0026rsquo;s data in the Quiqr Data directory in the Home directory of the current user.\nQuiqr Data on Windows #  C:\\Users\\robin\\QuiqrData Quiqr Data on macOS #  /Users/robin/Quiqr Data Quiqr Data on Linux/BSD #  /home/robin/Quiqr Data Site configuration #  All Quiqr sites store their top-level-configuration file in the root of the Quiqr Data Directory. This top-level-configuration file provides Quiqr path information to a Quiqr website.\n~/Quiqr Data/ ./config.my-site.json Hugo and Quiqr Site directory structure #  ./my_hugo_site/ ./content/ (hugo content directory) ./static/ (hugo static files directory) ./data/ (hugo data files directory) ./themes/ (hugo themes directory) ./resources/ (hugo temporary build resources directory) ./public/ (hugo final build directory) ./config.toml (hugo main config file) ./.quiqr-cache (quiqr thumbnails cache folder) ./quiqr/ (quiqr config folder) ./home/index.md (optional message to the content editor in Quiqr) ./forms/index.md (forms end point configuration files) ./model/base.yaml (main Quiqr Model Configuration File) ./model/partials/ (directory with model configuration partials files) ./model/partialsRemoteCache/ (directory with cached remote model configuration partials files) ./model/includes/ (directory with model configuration include files) "}),a.add({id:1,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/01-build/',title:"build",section:"Root properties",content:"Build #  The build property tells Quiqr which Hugo configuration file should be used when the site will be build. A build occurs when a site is published.\n./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  build: - config: config.toml key: default   [[build]] config = \u0026#34;config.toml\u0026#34; key = \u0026#34;default\u0026#34;   { \u0026#34;build\u0026#34;: [ { \u0026#34;config\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;default\u0026#34; } ] }     "}),a.add({id:2,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/',title:"Container Field Types",section:"Form Fields",content:"Container Field Types #  Container field are containers of other fields. Container fields can even be nested in other container fields.\n"}),a.add({id:3,href:'/docs/50-quiqr-application-development/10-create-a-new-field-type/',title:"Create a new field type",section:"Quiqr App. Developer Howto's",content:"Create new a new field type #  This HowTo teaches you how to create a new custom field type.\nIntroduction #  Quiqr Field Types are the user interface to data that is stored in the website.\nSteps #  copy an existing field type #  copy an existing field type that you like to use as template.\nThe field types are stored in the path src/components/SukohForm/components/\nThey are named FieldNameDynamic.js where FieldName is the name you want to use.\ncp src/components/SukohForm/components/SelectDynamic.js src/components/SukohForm/components/FontPickerDynamic.js Replace OldFieldName with NewFieldName #  Open your new file and replace the OldFieldName with new NewFieldName.\nAlso set a new field type in the method:\ngetType(){ return \u0026#39;new-field-name\u0026#39;; This is used in site/quiqr/model/base.yaml\nImport and export the type class #  In the file src/components/SukohForm/components/all.js the new type class should be imported and exported.\n... import FontPickerDynamic from './FontPickerDynamic'; ... export default [ ... FontPickerDynamic, ... ] Implement your own type code #  At this point you should implement your own code. It\u0026rsquo;s wise to test the new type in a demo website while you implement the new type. Take small steps.\n"}),a.add({id:4,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/',title:"Data Field Types",section:"Form Fields",content:"Data field types #  Data field types are used to input data from the user. The data will be saved.\n"}),a.add({id:5,href:'/docs/20-quiqr-developer-reference/30-global-preferences/10-general/',title:"General",section:"Global Preferences",content:"General Preferences #  Quiqr Data Folder #  This folder is used to store all sites and and temporary files. You should backup the contents of this folder.\nInterface Style #  Currently this can be set to Light and Dark.\n"}),a.add({id:6,href:'/docs/10-getting-started/',title:"Getting started",section:"Docs",content:"Get started #  Quiqr lets you publish to the web easily. The best way to get started with Quiqr is download the Quiqr Application, create a new site from a template, and publish this to the web.\nRead on or Watch the Quickstart video.\nInstall #   Download and install the latest version for your system.\nStart Quiqr for the first time. #  When you start Quiqr for the first time, you have no websites yet. You can create new or import from several sources, but to understand the concept of Quiqr right away, just import a Quiqr Template and play a little with the CMS.\n  Import from folder\n  Preview website #  From the moment you have created a website and opened it, a hugo server is running on your computer. Hit the Preview in Browser button to show how your website looks like.\n  Toolbar with Preview button\n  Publish to the web #  To publish to the web you have to setup a sync target. Currently you can sync to a GitHub-repository and to a folder. The folder needs to be copied to a public server manually.\n"}),a.add({id:7,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/02-includes/',title:"Includes",section:"Model Structure",content:"Includes #  In addition to using a single model/base config file, one can use the quiqr/model/includes/ directory to maintain an easier organization.\nYou can split up the model/base-file and use seperate files for menu, collections, dynamics, and singles.\nQuiqr automatically reads the files in ./quiqr/model/includes/ and merges these tree inside model/base.\nEach file represents a configuration root object, such as collections.toml for [Collections], menu.toml for [menu], singles.toml for [single] etc…\nEach file’s content must be top-level, for example:\nThe configuration in ./quiqr/model/base.yaml\nmenu: - key: pages title: Pages menuItems: - key: about - key: config title: settings menuItems: - key: config Equals ./quiqr/model/includes/menu.yaml\n- key: pages menuItems: - key: about title: Pages - key: config menuItems: - key: config title: settings "}),a.add({id:8,href:'/docs/10-getting-started/01.installation/',title:"Install Quiqr Desktop",section:"Getting started",content:"Install Quiqr #  Download the latest version of Quiqr for macOS and Windows from quiqr.org.\nLinux #  Download the latest Quiqr version for Linux in different package types from GitHub\n"}),a.add({id:9,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/layout-field-types/',title:"Layout Field Types",section:"Form Fields",content:"Layout field types #  Layout field types add extra info or structure to a form.\n"}),a.add({id:10,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/03-partials/',title:"Partials",section:"Model Structure",content:"Partials #  Partials are reusable configuration blocks that can be used in a form definition inside singles, collections and dynamics.\nPartials can be used with the property _mergePartial. The value of this property is points to the location of the partial file to use.\nPartials are merged with to other form attributes. Attributes which are also defined in the form with overwrite the partial attributes.\nRelative partial pointer #  This location can point to a file in the ./quiqr/model/partials directory. In this case the value is a string with the name of the partial file without it\u0026rsquo;s extension. E.g: single_images This converts to ./quiqr/model/partials.{yml,yaml,toml,json}\nRemote partial pointers #  The location can also point to an URI location prefixed with file://, https:// or http://. Locations with file:// point to the absolute location on your local machine. The http-protocols point to a location on internet. Quiqr Desktop will always make a copy of the remote file in the directory ./quiqr/model/partialsRemoteCache. Therefor it\u0026rsquo;s safe to publish and share your site with users that not have access to these resources. If you want to refresh the remotePartial, just remove the directory partialsRemoteCache and they wil automatically copied again. You can also turn on the Disable Partial Cache toggle in the menu\nExample #  In ./quiqr/model/base.yaml a form definition in singles points to minimal_configuration.\nThe base #  ./model/base.yaml\nsingles: - key: config file: config.toml title: Settings _mergePartial: minimal_configuration The partial #  ./model/partial/minimal_configuration.yaml\n- dataformat: yaml fields: - key: title title: Title type: string - key: description title: Description type: string - key: theme theme: Theme type: string title: Minimal Configuration The compiled end result #  singles: - key: config file: config.toml title: Settings dataformat: yaml fields: - key: description title: Description type: string - key: title title: Title type: string - key: theme theme: Theme type: string The title or the partial Minimal Configuration is overwritten the the calling definition in base.yml, leaving it Settings.  Example 2 #  In ./quiqr/model/base.yaml a form definition in singles points to a remote file containing a lot of hugo config options.\nThe base #  ./model/base.yaml\nsingles: - key: config file: config.toml title: Settings _mergePartial: https://raw.githubusercontent.com/quiqr/model-partials/main/singles/configuration-hugo-076.yml Example 2 #  In ./quiqr/model/base.yaml a form definition in singles points to a local file on the users computer containing a lot of hugo config options. This file:// URI is useful when developing remote configurations and you do not want to push at every change.\nThe base #  ./model/base.yaml\nsingles: - key: config file: config.toml title: Settings _mergePartial: file:///home/pim/cQuiqr/model-partials/singles/configuration-hugo-076.yml "}),a.add({id:11,href:'/docs/15-site-and-cms-development/01-user-roles/',title:"User Roles",section:"Site and CMS Development",content:"User Roles #  Quiqr has two major target user type: Content Editors and Site Developers.\nDevelopers need the same tools as editors, plus some extra tools. To make the experience for content editors as pleasant as possible we hide some information and tools in their interface.\nContent Editor #  The default role of Quiqr is Content Editor. A content editor download templates, import sites, change content and add synchronization targets and finally sync to this target.\nSite Developer #  As site developer you have direct access to more tools.\nTools in Site #  In a site, in the toolbar next to Content and Sync, there is the Tools button.\nThis Tools button gives access to several developer utilities and tools.\n  Tools only visible in Site Developers role\n  Content Menu items for developer #  The Content sidebar can have Menu items only visible for Site Developers by setting the matchRole property. See Menu Properties.\nSwitch Role #  In Windows and Linux roles are in the Edit Menu.\n  Switch Role\n  In macOS the roles are in the Quiqr Menu.\n  Switch Role in macOS\n  "}),a.add({id:12,href:'/docs/15-site-and-cms-development/',title:"Site and CMS Development",section:"Docs",content:"Sorry, it not yet finished #  Come back soon. We\u0026rsquo;re shooting right now.\n"}),a.add({id:13,href:'/docs/20-quiqr-developer-reference/50-examples/02-example-model-configuration/',title:"Blog (single file)",section:"Example Configurations",content:"Example 1: minimal one file blog #  Here\u0026rsquo;s an example model/base-file containing a minimal configuration for a blog website.\n./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  build: - config: config.toml key: default collections: - dataformat: yaml extension: md fields: - key: draft title: Draft type: boolean - key: title title: Title type: string - extensions: - jpg - png - jpeg - pdf - svg fields: - key: thumb title: Thumb type: bundle-image-thumbnail key: page_related_images path: \u0026#34;\u0026#34; title: Page related images type: bundle-manager - key: mainContent title: Main content type: markdown - key: publishdate title: Publishdate type: hidden - key: tags title: Tags type: chips folder: content/post/ itemtitle: Post key: c__post title: Posts hugover: extended_0.76.5 menu: - key: singles menuItems: - key: s__about title: Pages - key: collections menuItems: - key: c__post title: Groups - key: general menuItems: - key: config title: General serve: - config: config.toml key: default singles: - dataformat: toml fields: - key: description title: Description type: string - key: title title: Title type: string - fields: - key: author title: Author type: string - key: dateFormat title: Date format type: string - key: description title: Description type: string - key: paginationSinglePost title: Pagination single post type: boolean - key: readMore title: Read more type: boolean - key: style title: Style type: string groupdata: true key: params title: Params type: section file: config.toml key: config title: Settings - dataformat: yaml fields: - key: title title: Title type: string - key: description title: Description type: string - extensions: - jpg - png - jpeg - pdf - svg fields: - key: thumb title: Thumb type: bundle-image-thumbnail key: page_related_images path: images/ title: Page related images type: bundle-manager - key: mainContent title: Main content type: markdown file: content/about.md key: s__about previewUrl: /about/ title: About   hugover = \u0026#34;extended_0.76.5\u0026#34; [[build]] config = \u0026#34;config.toml\u0026#34; key = \u0026#34;default\u0026#34; [[collections]] dataformat = \u0026#34;yaml\u0026#34; extension = \u0026#34;md\u0026#34; folder = \u0026#34;content/post/\u0026#34; itemtitle = \u0026#34;Post\u0026#34; key = \u0026#34;c__post\u0026#34; title = \u0026#34;Posts\u0026#34; [[collections.fields]] key = \u0026#34;draft\u0026#34; title = \u0026#34;Draft\u0026#34; type = \u0026#34;boolean\u0026#34; [[collections.fields]] key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[collections.fields]] extensions = [\u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34;] key = \u0026#34;page_related_images\u0026#34; path = \u0026#34;\u0026#34; title = \u0026#34;Page related images\u0026#34; type = \u0026#34;bundle-manager\u0026#34; [[collections.fields.fields]] key = \u0026#34;thumb\u0026#34; title = \u0026#34;Thumb\u0026#34; type = \u0026#34;bundle-image-thumbnail\u0026#34; [[collections.fields]] key = \u0026#34;mainContent\u0026#34; title = \u0026#34;Main content\u0026#34; type = \u0026#34;markdown\u0026#34; [[collections.fields]] key = \u0026#34;publishdate\u0026#34; title = \u0026#34;Publishdate\u0026#34; type = \u0026#34;hidden\u0026#34; [[collections.fields]] key = \u0026#34;tags\u0026#34; title = \u0026#34;Tags\u0026#34; type = \u0026#34;chips\u0026#34; [[menu]] key = \u0026#34;singles\u0026#34; title = \u0026#34;Pages\u0026#34; [[menu.menuItems]] key = \u0026#34;s__about\u0026#34; [[menu]] key = \u0026#34;collections\u0026#34; title = \u0026#34;Groups\u0026#34; [[menu.menuItems]] key = \u0026#34;c__post\u0026#34; [[menu]] key = \u0026#34;general\u0026#34; title = \u0026#34;General\u0026#34; [[menu.menuItems]] key = \u0026#34;config\u0026#34; [[serve]] config = \u0026#34;config.toml\u0026#34; key = \u0026#34;default\u0026#34; [[singles]] dataformat = \u0026#34;toml\u0026#34; file = \u0026#34;config.toml\u0026#34; key = \u0026#34;config\u0026#34; title = \u0026#34;Settings\u0026#34; [[singles.fields]] key = \u0026#34;description\u0026#34; title = \u0026#34;Description\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields]] key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields]] groupdata = true key = \u0026#34;params\u0026#34; title = \u0026#34;Params\u0026#34; type = \u0026#34;section\u0026#34; [[singles.fields.fields]] key = \u0026#34;author\u0026#34; title = \u0026#34;Author\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields.fields]] key = \u0026#34;dateFormat\u0026#34; title = \u0026#34;Date format\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields.fields]] key = \u0026#34;description\u0026#34; title = \u0026#34;Description\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields.fields]] key = \u0026#34;paginationSinglePost\u0026#34; title = \u0026#34;Pagination single post\u0026#34; type = \u0026#34;boolean\u0026#34; [[singles.fields.fields]] key = \u0026#34;readMore\u0026#34; title = \u0026#34;Read more\u0026#34; type = \u0026#34;boolean\u0026#34; [[singles.fields.fields]] key = \u0026#34;style\u0026#34; title = \u0026#34;Style\u0026#34; type = \u0026#34;string\u0026#34; [[singles]] dataformat = \u0026#34;yaml\u0026#34; file = \u0026#34;content/about.md\u0026#34; key = \u0026#34;s__about\u0026#34; previewUrl = \u0026#34;/about/\u0026#34; title = \u0026#34;About\u0026#34; [[singles.fields]] key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields]] key = \u0026#34;description\u0026#34; title = \u0026#34;Description\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields]] extensions = [\u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34;] key = \u0026#34;page_related_images\u0026#34; path = \u0026#34;images/\u0026#34; title = \u0026#34;Page related images\u0026#34; type = \u0026#34;bundle-manager\u0026#34; [[singles.fields.fields]] key = \u0026#34;thumb\u0026#34; title = \u0026#34;Thumb\u0026#34; type = \u0026#34;bundle-image-thumbnail\u0026#34; [[singles.fields]] key = \u0026#34;mainContent\u0026#34; title = \u0026#34;Main content\u0026#34; type = \u0026#34;markdown\u0026#34;   { \u0026#34;build\u0026#34;: [ { \u0026#34;config\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;default\u0026#34; } ], \u0026#34;collections\u0026#34;: [ { \u0026#34;dataformat\u0026#34;: \u0026#34;yaml\u0026#34;, \u0026#34;extension\u0026#34;: \u0026#34;md\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;draft\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Draft\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;extensions\u0026#34;: [ \u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34; ], \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;thumb\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Thumb\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-image-thumbnail\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;page_related_images\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Page related images\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-manager\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;mainContent\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Main content\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;markdown\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;publishdate\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Publishdate\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;hidden\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;tags\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Tags\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;chips\u0026#34; } ], \u0026#34;folder\u0026#34;: \u0026#34;content/post/\u0026#34;, \u0026#34;itemtitle\u0026#34;: \u0026#34;Post\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;c__post\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Posts\u0026#34; } ], \u0026#34;hugover\u0026#34;: \u0026#34;extended_0.76.5\u0026#34;, \u0026#34;menu\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;singles\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;s__about\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Pages\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;collections\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;c__post\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Groups\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;general\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;config\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;General\u0026#34; } ], \u0026#34;serve\u0026#34;: [ { \u0026#34;config\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;default\u0026#34; } ], \u0026#34;singles\u0026#34;: [ { \u0026#34;dataformat\u0026#34;: \u0026#34;toml\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Description\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;author\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Author\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;dateFormat\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Date format\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Description\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;paginationSinglePost\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Pagination single post\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;readMore\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Read more\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;style\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Style\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;params\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Params\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34; } ], \u0026#34;file\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;config\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Settings\u0026#34; }, { \u0026#34;dataformat\u0026#34;: \u0026#34;yaml\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Description\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;extensions\u0026#34;: [ \u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34; ], \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;thumb\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Thumb\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-image-thumbnail\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;page_related_images\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;images/\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Page related images\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-manager\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;mainContent\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Main content\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;markdown\u0026#34; } ], \u0026#34;file\u0026#34;: \u0026#34;content/about.md\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;s__about\u0026#34;, \u0026#34;previewUrl\u0026#34;: \u0026#34;/about/\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;About\u0026#34; } ] }     "}),a.add({id:14,href:'/docs/10-getting-started/02.import-site/',title:"Import Site",section:"Getting started",content:"Import Site #  You can import sites into your local Quiqr library from various sources.\nFrom Folder #  Import from folder. You can import Hugo folders or Quiqr folders.\n In the import dialog browser to the folder containing the Hugo Sources. Enter a name for your new site Select a Hugo version you would like to use for this site If you need extended functionality, e.g. Hugo\u0026rsquo;s sass compiler, enable the extended switch. Click Import Site and afterwards open your newly made site.  From public git repository #  "}),a.add({id:15,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/02-serve/',title:"serve",section:"Root properties",content:"Serve #  The serve property tells Quiqr which Hugo configuration file should be used for the live preview server. The server listens to http://localhost:13131.\n./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  serve: - config: config.toml hugoHidePreviewSite: false key: default   [[serve]] config = \u0026#34;config.toml\u0026#34; hugoHidePreviewSite = false key = \u0026#34;default\u0026#34;   { \u0026#34;serve\u0026#34;: [ { \u0026#34;config\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;hugoHidePreviewSite\u0026#34;: false, \u0026#34;key\u0026#34;: \u0026#34;default\u0026#34; } ] }     "}),a.add({id:16,href:'/docs/20-quiqr-developer-reference/30-global-preferences/20-variables/',title:"Variables",section:"Global Preferences",content:"Global Variables #  Global variables are used as override values in build actions. This is usefull when for example path to executables differ on various user systems.\nVariables must contain alphanumeric characters or underscores. E.g. PANDOC_EXECUTABLE or pandoc_executable. The replacer is case sensitive but the implementor is free to choose lower or upper case.\n"}),a.add({id:17,href:'/docs/20-quiqr-developer-reference/30-global-preferences/30-advanced/',title:"Advanced",section:"Global Preferences",content:"Advanced Preferences #  Custom open-in-command #  The command set is used to open the the current site directory when clicked on the custom open icon in the Site Toolbox section. See screenshot below.\n Variables are replaced before the open command is executed. Available variables are:\n %SITE_PATH %SITE_NAME  tip you can use the setting below to open the site folder in a tmux shell when a session quiqr-data is open.\nzsh -c \u0026quot;tmux new-window -d -n '%SITE_NAME' -c '%SITE_PATH' -t quiqr-data:\u0026quot; OpenAI API Key #  When set with a valid key, the OpenAI assistant will be activated for every text field in all Site objects. See example popup below.\n "}),a.add({id:18,href:'/docs/20-quiqr-developer-reference/03-content-model/',title:"Content Model",section:"Quiqr CMS Developer Reference",content:"Content Model Configuration #  Quiqr can create advanced advanced models with customized forms for editing any kind of content. These forms are configured in the ./quiqr/model/ directory with base.json as the main configuration file. The model-files can be in YAML, JSON or TOML-formatting.\nRoot Properties #  The model is split up in several main properties:\n build: information how to serve the hugo website serve: information how to build the hugo website hugover: the hugo version to use. The correct hugo version is downloaded automatically. collections: main key for collections with pages. E.g. blog posts singles: main key for single page configurations. E.g. home page or about menu: main key for the menu configuration of the CMS. dynamics: main key for the dynamics form definitions to be used in dynamic forms.  Model File Structure #  Quiqr has helpers two organize complex models and prevent redundant configuration code. Includes are used to split the main-file into seperate files and partials makes it possible to reuse configuration code.\nForm Fields #  The main keys Singles, Collections and Dynamics can have form fields definitions. These are the building blocks for creating forms.\nAll available form field types are described in the section Form Fields. Form fields have their own properties for configuration. All form fields share the following properties:\nProperties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   disabled boolean optional Disabled elements are completely ignored and not visible in the form    Full Example #   The Kitchen Sink Template has a every field type configured. Use this template to learn and play around with the Quiqr model.\n"}),a.add({id:19,href:'/docs/20-quiqr-developer-reference/30-global-preferences/',title:"Global Preferences",section:"Quiqr CMS Developer Reference",content:"Global Preferences #  Users can set global Quiqr Application preferences. This preferences can change the look and behaviour the Quiqr application. All the preferences are stored in a JSON-file.\nOn Linux this file is stored at ~/.config/quiqr/quiqr-app-config.json.\nOn macOS this file is stored at ~/Library/Application Support/quiqr/quiqr-app-config.json.\nOn Window this file is stored at %AppData%\\quiqr\\quiqr-app-config.json.\n"}),a.add({id:20,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/03-hugover/',title:"hugover",section:"Root properties",content:"hugover #  The hugover property tells Quiqr which Hugo version it should use. If the version is not available, it will automatically downloaded from the official Hugo site.\n./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  hugover: extended_0.76.5   hugover = \u0026#34;extended_0.76.5\u0026#34;   { \u0026#34;hugover\u0026#34;: \u0026#34;extended_0.76.5\u0026#34; }     "}),a.add({id:21,href:'/docs/20-quiqr-developer-reference/03-content-model/04-build-actions/',title:"Build Actions",section:"Content Model",content:"Build Actions #  Build actions are custom actions which are triggered by a user clicking the action button. Build actions can be attached to a Single or a Collection object.\nA build action allows the user to use data stored in a Quiqr site object as input for an external program. The value that the external program returns can be displayed, or, if it is a filename, the user can open it.\nA typical use case for a build action would a PDF builds. Using Pandoc or Quarto a markdown file could be converted to a nicely formatted PDF file.\nVariables #  Before a build action is executed variables will be replaced by a their real values. There are standard Quiqr site variables like SITE_PATH and there are custom declared variables. The custom declared variables can be overruled in the global variable preferences of the installed Quiqr application.\nA % symbol needs to be written before a variable name in the definition to let Quiqr know it should be replaced with the real value.\nAvailable standard quiqr site variables:\n SITE_PATH: Is replaced with the root folder of the site. E.g. /Users/pim/Quiqr/sites/my-documents. DOCUMENT_PATH: Is replaced with the path of the file which opened by the user. E.g. /Users/pim/Quiqr/sites/my-documents/content/quotations/001-johnson.md.  Properties #  These are the properties of one build action.\n   property value type optional description     key string mandatory Keys are for internal use and must be unique.   button_text string mandatory Text displayed on the button.   execute dictionary mandatory Contains different settings to define the external program dispatch.   execute.variables array with dictionaries optional Array with key value pairs containing variable name and their values. If they are used in the command or args strings. they serve as default values.   execute.stdout_type string optional The stdout_type can be set to file_path or ascii_message or message.   execute.unix dictionary mandatory Contains command and arguments to run on Linux and macOS systems.   execute.unix.command string mandatory File path to the executable to run. Be aware to enter full paths as Quiqr has no PATH variable set. Variables are replaced before execution.   execute.unix.args array of strings optional All arguments used by the executable. Variables are replaced before execution.   execute.windows dictionary optional Contains command and arguments to run on Linux and macOS systems.   execute.windows.command string mandatory File path to the executable to run. Be aware to enter full paths as Quiqr has no PATH variable set. Variables are replaced before execution.   execute.windows.args array of strings optional All arguments used by the executable. Variables are replaced before execution.    stdout_type\u0026rsquo;s #   value = file_path - When set to file_path a link to open the result file is displayed after the build action was finished succesfully. value = message - When set to message the return value is displayed after the build action was finished succesfully. value = ascii_message - When set to ascii_message the return value is displayed after the build action was finished succesfully. A fixed font is used to maintain correct layout.  Full example of a collection object. #  Configuration #  ./quiqr/model/includes/collections/quotation. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  amount: 2 build_actions: - button_text: Build PDF execute: stdout_type: file_path unix: args: - \u0026#39;%DOCUMENT_PATH\u0026#39; - -t - pdf command: \u0026#39;%PANDOC_EXECUTABLE\u0026#39; variables: - name: PANDOC_EXECUTABLE - value: /usr/bin/pandoc windows: args: - pandoc.exe - \u0026#39;%DOCUMENT_PATH\u0026#39; - -t - pdf command: wsl key: magic_make_pdf dataformat: yml extension: md fields: - fields: - key: company_name type: string - key: contact_person type: string groupdata: true key: client type: pull - key: date type: string - key: mainContent title: Main Content type: markdown folder: content/quotations hidePreviewIcon: true itemtitle: Quotation key: sample_field title: Quotations type: empty-line   amount = 2 dataformat = \u0026#34;yml\u0026#34; extension = \u0026#34;md\u0026#34; folder = \u0026#34;content/quotations\u0026#34; hidePreviewIcon = true itemtitle = \u0026#34;Quotation\u0026#34; key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Quotations\u0026#34; type = \u0026#34;empty-line\u0026#34; [[build_actions]] button_text = \u0026#34;Build PDF\u0026#34; key = \u0026#34;magic_make_pdf\u0026#34; [build_actions.execute] stdout_type = \u0026#34;file_path\u0026#34; [build_actions.execute.unix] args = [\u0026#34;%DOCUMENT_PATH\u0026#34;, \u0026#34;-t\u0026#34;, \u0026#34;pdf\u0026#34;] command = \u0026#34;%PANDOC_EXECUTABLE\u0026#34; [[build_actions.execute.variables]] name = \u0026#34;PANDOC_EXECUTABLE\u0026#34; [[build_actions.execute.variables]] value = \u0026#34;/usr/bin/pandoc\u0026#34; [build_actions.execute.windows] args = [\u0026#34;pandoc.exe\u0026#34;, \u0026#34;%DOCUMENT_PATH\u0026#34;, \u0026#34;-t\u0026#34;, \u0026#34;pdf\u0026#34;] command = \u0026#34;wsl\u0026#34; [[fields]] groupdata = true key = \u0026#34;client\u0026#34; type = \u0026#34;pull\u0026#34; [[fields.fields]] key = \u0026#34;company_name\u0026#34; type = \u0026#34;string\u0026#34; [[fields.fields]] key = \u0026#34;contact_person\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;date\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;mainContent\u0026#34; title = \u0026#34;Main Content\u0026#34; type = \u0026#34;markdown\u0026#34;   { \u0026#34;amount\u0026#34;: 2, \u0026#34;build_actions\u0026#34;: [ { \u0026#34;button_text\u0026#34;: \u0026#34;Build PDF\u0026#34;, \u0026#34;execute\u0026#34;: { \u0026#34;stdout_type\u0026#34;: \u0026#34;file_path\u0026#34;, \u0026#34;unix\u0026#34;: { \u0026#34;args\u0026#34;: [ \u0026#34;%DOCUMENT_PATH\u0026#34;, \u0026#34;-t\u0026#34;, \u0026#34;pdf\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;%PANDOC_EXECUTABLE\u0026#34; }, \u0026#34;variables\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PANDOC_EXECUTABLE\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;/usr/bin/pandoc\u0026#34; } ], \u0026#34;windows\u0026#34;: { \u0026#34;args\u0026#34;: [ \u0026#34;pandoc.exe\u0026#34;, \u0026#34;%DOCUMENT_PATH\u0026#34;, \u0026#34;-t\u0026#34;, \u0026#34;pdf\u0026#34; ], \u0026#34;command\u0026#34;: \u0026#34;wsl\u0026#34; } }, \u0026#34;key\u0026#34;: \u0026#34;magic_make_pdf\u0026#34; } ], \u0026#34;dataformat\u0026#34;: \u0026#34;yml\u0026#34;, \u0026#34;extension\u0026#34;: \u0026#34;md\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;company_name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;contact_person\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;client\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;pull\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;mainContent\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Main Content\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;markdown\u0026#34; } ], \u0026#34;folder\u0026#34;: \u0026#34;content/quotations\u0026#34;, \u0026#34;hidePreviewIcon\u0026#34;: true, \u0026#34;itemtitle\u0026#34;: \u0026#34;Quotation\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Quotations\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;empty-line\u0026#34; }     "}),a.add({id:22,href:'/docs/20-quiqr-developer-reference/50-examples/',title:"Example Configurations",section:"Quiqr CMS Developer Reference",content:"Example Configurations #  This book shows one example in which a data model of a blog is defined. It\u0026rsquo;s recommended though to checkout the real life examples in the Template Gallery. This gallery also contains the Kitchen Sink template which shows all possible form fields in different site properties. The quiqr/model folder is the place to start learning from an example template.\n"}),a.add({id:23,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/04-menu/',title:"menu",section:"Root properties",content:"Root property: menu #  The Menu main key is optional. When not defined Quiqr creates two menu sections: Singles and Collections.\nWhen menu is defined the default Quiqr content navigation is overriden by this configuration.\nProperties #  There are the properties of a single menu dictionary.\n   property value type optional description     key string mandatory Keys are for internal use and must be unique   title string mandatory The title of this menu   menuItems array of dictionaries mandatory contains a menu items   matchRole string optional when set to \u0026ldquo;siteDeveloper\u0026rdquo; this menu is only visible in the role Site Developer    Every menu item has a dictionary with. These are the properties of a menu item.\n   property value type optional description     key string mandatory this refers to the key of the defined Single of Collection    Example #  ./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  menu: - key: pages menuItems: - key: about title: Pages - key: blog menuItems: - key: posts title: Groups - key: config menuItems: - key: config title: Settings   [[menu]] key = \u0026#34;pages\u0026#34; title = \u0026#34;Pages\u0026#34; [[menu.menuItems]] key = \u0026#34;about\u0026#34; [[menu]] key = \u0026#34;blog\u0026#34; title = \u0026#34;Groups\u0026#34; [[menu.menuItems]] key = \u0026#34;posts\u0026#34; [[menu]] key = \u0026#34;config\u0026#34; title = \u0026#34;Settings\u0026#34; [[menu.menuItems]] key = \u0026#34;config\u0026#34;   { \u0026#34;menu\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;pages\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;about\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Pages\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;blog\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;posts\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Groups\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;config\u0026#34;, \u0026#34;menuItems\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;config\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Settings\u0026#34; } ] }     "}),a.add({id:24,href:'/docs/50-quiqr-application-development/',title:"Quiqr App. Developer Howto's",section:"Docs",content:"Quiqr Application Developer Howto\u0026rsquo;set #  The Quiqr Desktop Application is developed by the Quiqr community and anyone invited to help.\nThe center development hub is located on github.com/quiqr. This section should help giving guidance in the source code.\n"}),a.add({id:25,href:'/docs/80-release-notes/',title:"Release Notes",section:"Docs",content:"Release Notes #  Lack of time prevents us from writing good looking release notes. Please read the CHANGELOG where all important changes are listed in chronological order.\nThe latest public release version can be found and downloaded on quiqr.com/quiqr/quiqr-desktop\nVersions before and after v0.10 #  On March 16th 2022 Quiqr was forked from the PoppyGo. The Quiqr App continued it\u0026rsquo;s version history and started with version 0.10.\n"}),a.add({id:26,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/05-singles/',title:"single",section:"Root properties",content:"Root property: singles #  The singles property is optional. When defined Singles containes an array of dictionaries. Every dictionary defines a single form to edit a single file. The file can be located anywhere in the site directory structure but typically points to a file in the root directory, the content directory or the data directory of a hugo project.\nThese are the properties of a Single dictionary.\n   property value type optional description     key string mandatory Keys are for internal use and must be unique   dataformat string: yaml, toml,json mandatory Defines the type of output format. If file is a markdown file the outputs regards to the frontmatter   title string mandatory The title of this page in the menu and when Quiqr App refers to this page   file string: relative path to file mandatory The path to the file. This is the data storage. Can be data/somefile.{json,toml,yaml} or content/somefile.md   previewUrl string: relative url path to the website optional When set, this path is used to preview the page   hidePreviewIcon boolean optional Hide Preview Icon which opens the page in the browser   hideExternalEditIcon boolean optional Hide Enternal Editor Icon which opens the file in the OS Text Editor   hideSaveButton boolean optional Hide form Save button   pullOuterRootKey string optional This make files with outer arrays possible   buildActions array of dictionaries optional Defines buttons which triggers a custom build actions.   fields array of dictionaries mandatory These are the form input fields.    Example #  ./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  singles: - dataformat: toml fields: - key: description title: Description type: string - key: title title: Title type: string file: config.toml key: config title: Settings   [[singles]] dataformat = \u0026#34;toml\u0026#34; file = \u0026#34;config.toml\u0026#34; key = \u0026#34;config\u0026#34; title = \u0026#34;Settings\u0026#34; [[singles.fields]] key = \u0026#34;description\u0026#34; title = \u0026#34;Description\u0026#34; type = \u0026#34;string\u0026#34; [[singles.fields]] key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;singles\u0026#34;: [ { \u0026#34;dataformat\u0026#34;: \u0026#34;toml\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Description\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;file\u0026#34;: \u0026#34;config.toml\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;config\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Settings\u0026#34; } ] }     "}),a.add({id:27,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/06-collections/',title:"collections",section:"Root properties",content:"Root property: collections #  The collections property is optional. It can define an array with one or more collections with pages which will get their own navigation item in the Quiqr Content Menu. In the above example there is a Collection Blog configured containing blog pages in the folder content/blog/. Below the properties of a single collection dictionary.\n   property value type optional description     key string mandatory Keys are for internal use and must be unique   dataformat string: yaml, toml,json mandatory Defines the output format of the frontmatter block. Collections can only handle markdown files. the outputs regards to the frontmatter   extension ??? mandatory ???   title string mandatory The title of this page in the menu and when Quiqr App refers to this page   itemtitle string mandatory The singular name of the collection items   hideIndex boolean optional when set true the _index.md is not showed in the list of items   folder string: relative path to dir mandatory The path to the directory containing all files with the configured extension.   previewUrlBase string: relative url path to the website optional When set, this path as base path to preview the page   hidePreviewIcon boolean optional Hide Preview Icon which opens the page in the browser   hideExternalEditIcon boolean optional Hide Enternal Editor Icon which opens the file in the OS Text Editor   hideSaveButton boolean optional Hide form Save button   buildActions array of dictionaries optional Defines buttons which triggers a custom build actions.   fields array of dictionaries mandatory These are the form input fields.   sortkey string optional can be set to a front matter key which will be used for sorting    Example #  ./model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  collections: - dataformat: yaml extension: md fields: - key: title title: Title type: string - key: mainContent title: Main content type: markdown - key: publishdate title: Publishdate type: hidden - key: tags title: Tags type: chips folder: content/post/ itemtitle: Post key: post title: Posts   [[collections]] dataformat = \u0026#34;yaml\u0026#34; extension = \u0026#34;md\u0026#34; folder = \u0026#34;content/post/\u0026#34; itemtitle = \u0026#34;Post\u0026#34; key = \u0026#34;post\u0026#34; title = \u0026#34;Posts\u0026#34; [[collections.fields]] key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[collections.fields]] key = \u0026#34;mainContent\u0026#34; title = \u0026#34;Main content\u0026#34; type = \u0026#34;markdown\u0026#34; [[collections.fields]] key = \u0026#34;publishdate\u0026#34; title = \u0026#34;Publishdate\u0026#34; type = \u0026#34;hidden\u0026#34; [[collections.fields]] key = \u0026#34;tags\u0026#34; title = \u0026#34;Tags\u0026#34; type = \u0026#34;chips\u0026#34;   { \u0026#34;collections\u0026#34;: [ { \u0026#34;dataformat\u0026#34;: \u0026#34;yaml\u0026#34;, \u0026#34;extension\u0026#34;: \u0026#34;md\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;mainContent\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Main content\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;markdown\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;publishdate\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Publishdate\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;hidden\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;tags\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Tags\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;chips\u0026#34; } ], \u0026#34;folder\u0026#34;: \u0026#34;content/post/\u0026#34;, \u0026#34;itemtitle\u0026#34;: \u0026#34;Post\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;post\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Posts\u0026#34; } ] }     "}),a.add({id:28,href:'/docs/20-quiqr-developer-reference/03-content-model/02-model-file-structure/01-root-properties/07-dynamics/',title:"dynamics",section:"Root properties",content:"Root property: dynamics #  The dynamics property is optional. Dynamics are used to dynamically mount sub-forms in the accordion form field\nThe dynamics property contains an array of dictionaries which itself it a form field definition.\nSupported fields in dynamic sub form #  Note Not all field types can be used in a subform. This list with field types is known to work:\n string image-select nest accordion boolean unique  These field types are know NOT to work:\n section pull  Example #  model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dynamics: - component_type: banner fields: - key: bg_image title: Background image type: string - key: buttontxt title: Button text type: string key: component-banner - component_type: bullet-list fields: - key: text1 title: Text 1 type: string - key: text2 title: Text 2 type: string - key: text3 title: Text 3 type: string key: component-bullet-list   [[dynamics]] component_type = \u0026#34;banner\u0026#34; key = \u0026#34;component-banner\u0026#34; [[dynamics.fields]] key = \u0026#34;bg_image\u0026#34; title = \u0026#34;Background image\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;buttontxt\u0026#34; title = \u0026#34;Button text\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics]] component_type = \u0026#34;bullet-list\u0026#34; key = \u0026#34;component-bullet-list\u0026#34; [[dynamics.fields]] key = \u0026#34;text1\u0026#34; title = \u0026#34;Text 1\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;text2\u0026#34; title = \u0026#34;Text 2\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;text3\u0026#34; title = \u0026#34;Text 3\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;dynamics\u0026#34;: [ { \u0026#34;component_type\u0026#34;: \u0026#34;banner\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;bg_image\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Background image\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;buttontxt\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Button text\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;component-banner\u0026#34; }, { \u0026#34;component_type\u0026#34;: \u0026#34;bullet-list\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;text1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text3\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;component-bullet-list\u0026#34; } ] }     "}),a.add({id:29,href:'/docs/99-about-this-book/',title:"About this book",section:"Docs",content:"About the Quiqr Book #  This handbook is not an extensive guide on how to use and configure hugo websites The purpose of this document is to explain how to configure, distribute and maintain Quiqr websites.\nTo search for a particular term within the Quiqr Book, select the \u0026lsquo;magnifying glass\u0026rsquo; icon, or press \u0026rsquo;s'.\nThose looking for tips and tricks on how to develop Hugo websites should consult the official Hugo Documentation or the Hugo Forum.\nThe latest version of this book is located at https://book.quiqr.org/.\nExample Commands #  Examples in this guide may have snippets of commands to be run in your shell or paste in your editor. When you see a snippet beginning with $ it\u0026rsquo;s a shell command. as your normal user. After either of these lines, there may be example output from the command.\nPlaceholders #  Some examples include text with placeholders. Placeholders indicate where you should substitute the appropriate information. For example:\n$ cat ~/Quiqr Data/config.\u0026lt;site_name\u0026gt;.json This means you need to substitute the text \u0026lt;site_name\u0026gt; with the actual site name.\nContributing #  We welcome contributions to this book. Please read our Contributing Guidelines.\n"}),a.add({id:30,href:'/docs/10-getting-started/10.quick-start-video/',title:"Quick Start Video",section:"Getting started",content:"Quick Start Video #  Sorry! It\u0026rsquo;s not finished yet. We\u0026rsquo;re shooting it right now.\n"}),a.add({id:31,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/accordion/',title:"Accordion",section:"Container Field Types",content:"Accordion #  The accordion field is a container field. It can define multiple input fields, which are displayed as subform. The output is an array of dictionaries.\n  Accordion\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the accordion element   dynFormSearchKey string optional (default: null) key of one of the child field of which the value refers to a custom partial form   dynFormObjectFile string with relative path to file without file extension optional (default: null) if dynFormSearchKey is set this path points to the file containing a subform. Do not define the used file extension. Quiqr will automatically try to open json, toml or yaml files. If dynFormObjectFile is not set it refers to the partials in the ./quiqr/model/base file itself.   dynFormObjectRoot string optional (default: null) if dynFormObjectFile is set this points to the root node where the subform is defined e.g. components   arrayIndicesAreKeys boolean optional (default: false Enables read/write dictionaries which are actually arrays with keys as indeces   disableCreate boolean optional (default: false Disables creating new items   disableDelete boolean optional (default: false Disables deleting items   disableSort boolean optional (default: false Disables sorting items   fields array of dictionaries mandatory These are the form input fields.   fields.[n].arrayTitle boolean optional (default: false) The value of the child field which has arrayTitle=true will be displayed as the accordion item title    Disabled child fields #  if a child field of an accordion has a boolean field with a disabled and this is set to true, the item will display light grey text to indicate it\u0026rsquo;s disabled.\nSample 1: Regular accordion #  Configuration #  Below an example of a regular accordion configuration without dynamic forms.\n./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  fields: - arrayTitle: true key: title title: Title type: string - key: boolean1 title: boolean1 type: boolean - key: boolean2 title: boolean2 type: boolean - key: boolean3 title: boolean3 type: boolean key: my-accordion title: accordion type: accordion   key = \u0026#34;my-accordion\u0026#34; title = \u0026#34;accordion\u0026#34; type = \u0026#34;accordion\u0026#34; [[fields]] arrayTitle = true key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;boolean1\u0026#34; title = \u0026#34;boolean1\u0026#34; type = \u0026#34;boolean\u0026#34; [[fields]] key = \u0026#34;boolean2\u0026#34; title = \u0026#34;boolean2\u0026#34; type = \u0026#34;boolean\u0026#34; [[fields]] key = \u0026#34;boolean3\u0026#34; title = \u0026#34;boolean3\u0026#34; type = \u0026#34;boolean\u0026#34;   { \u0026#34;fields\u0026#34;: [ { \u0026#34;arrayTitle\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean3\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;my-accordion\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;accordion\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;accordion\u0026#34; }     Output #  ./data/sample. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  my-accordion: - boolean1: false boolean2: false boolean3: false title: some title - boolean1: true boolean2: false boolean3: true title: second item   [[my-accordion]] boolean1 = false boolean2 = false boolean3 = false title = \u0026#34;some title\u0026#34; [[my-accordion]] boolean1 = true boolean2 = false boolean3 = true title = \u0026#34;second item\u0026#34;   { \u0026#34;my-accordion\u0026#34;: [ { \u0026#34;boolean1\u0026#34;: false, \u0026#34;boolean2\u0026#34;: false, \u0026#34;boolean3\u0026#34;: false, \u0026#34;title\u0026#34;: \u0026#34;some title\u0026#34; }, { \u0026#34;boolean1\u0026#34;: true, \u0026#34;boolean2\u0026#34;: false, \u0026#34;boolean3\u0026#34;: true, \u0026#34;title\u0026#34;: \u0026#34;second item\u0026#34; } ] }     Sample 2: Accordion with dynamic forms defined in ./quiqr/model/base.yaml #  Configuration #  Fragments of the ./quiqr/model/base.yaml with a dynamic accordion and a partials section\n./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dynFormSearchKey: component_type fields: - arrayTitle: true key: title title: Title type: string - key: component_type multiple: false options: - text: Poppy Banner value: poppy-banner - text: Poppy Shortlist value: poppy-shortlist title: Component Type type: select key: page_sections title: Page sections type: accordion   dynFormSearchKey = \u0026#34;component_type\u0026#34; key = \u0026#34;page_sections\u0026#34; title = \u0026#34;Page sections\u0026#34; type = \u0026#34;accordion\u0026#34; [[fields]] arrayTitle = true key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;component_type\u0026#34; multiple = false title = \u0026#34;Component Type\u0026#34; type = \u0026#34;select\u0026#34; [[fields.options]] text = \u0026#34;Poppy Banner\u0026#34; value = \u0026#34;poppy-banner\u0026#34; [[fields.options]] text = \u0026#34;Poppy Shortlist\u0026#34; value = \u0026#34;poppy-shortlist\u0026#34;   { \u0026#34;dynFormSearchKey\u0026#34;: \u0026#34;component_type\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;arrayTitle\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;component_type\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;Poppy Banner\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;poppy-banner\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;Poppy Shortlist\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;poppy-shortlist\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Component Type\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;page_sections\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Page sections\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;accordion\u0026#34; }     ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dynamics: - component_type: poppy-banner fields: - key: poppy_variant multiple: false options: - text: Full height value: header-banner-full-height - text: Regular value: header-banner title: Quiqr Variant type: select - key: bg_image title: Background image type: string - key: buttontxt title: Button text type: string key: poppy-banner - component_type: poppy-shortlist fields: - key: text1 title: Text 1 type: string - key: text2 title: Text 2 type: string - key: text3 title: Text 3 type: string groupdata: true key: poppy-shortlist type: section   [[dynamics]] component_type = \u0026#34;poppy-banner\u0026#34; key = \u0026#34;poppy-banner\u0026#34; [[dynamics.fields]] key = \u0026#34;poppy_variant\u0026#34; multiple = false title = \u0026#34;Quiqr Variant\u0026#34; type = \u0026#34;select\u0026#34; [[dynamics.fields.options]] text = \u0026#34;Full height\u0026#34; value = \u0026#34;header-banner-full-height\u0026#34; [[dynamics.fields.options]] text = \u0026#34;Regular\u0026#34; value = \u0026#34;header-banner\u0026#34; [[dynamics.fields]] key = \u0026#34;bg_image\u0026#34; title = \u0026#34;Background image\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;buttontxt\u0026#34; title = \u0026#34;Button text\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics]] component_type = \u0026#34;poppy-shortlist\u0026#34; groupdata = true key = \u0026#34;poppy-shortlist\u0026#34; type = \u0026#34;section\u0026#34; [[dynamics.fields]] key = \u0026#34;text1\u0026#34; title = \u0026#34;Text 1\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;text2\u0026#34; title = \u0026#34;Text 2\u0026#34; type = \u0026#34;string\u0026#34; [[dynamics.fields]] key = \u0026#34;text3\u0026#34; title = \u0026#34;Text 3\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;dynamics\u0026#34;: [ { \u0026#34;component_type\u0026#34;: \u0026#34;poppy-banner\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;poppy_variant\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;Full height\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;header-banner-full-height\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;Regular\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;header-banner\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Quiqr Variant\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;bg_image\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Background image\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;buttontxt\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Button text\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;poppy-banner\u0026#34; }, { \u0026#34;component_type\u0026#34;: \u0026#34;poppy-shortlist\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;text1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text3\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;poppy-shortlist\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34; } ] }     Output #  ./data/sample. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  page_sections: - bg_image: img1.png buttontxt: ORDER NOW component_type: component1 poppy_variant: header-banner-full-height title: some title - text1: foo text2: bar text3: bar title: another page element   [[page_sections]] bg_image = \u0026#34;img1.png\u0026#34; buttontxt = \u0026#34;ORDER NOW\u0026#34; component_type = \u0026#34;component1\u0026#34; poppy_variant = \u0026#34;header-banner-full-height\u0026#34; title = \u0026#34;some title\u0026#34; [[page_sections]] text1 = \u0026#34;foo\u0026#34; text2 = \u0026#34;bar\u0026#34; text3 = \u0026#34;bar\u0026#34; title = \u0026#34;another page element\u0026#34;   { \u0026#34;page_sections\u0026#34;: [ { \u0026#34;bg_image\u0026#34;: \u0026#34;img1.png\u0026#34;, \u0026#34;buttontxt\u0026#34;: \u0026#34;ORDER NOW\u0026#34;, \u0026#34;component_type\u0026#34;: \u0026#34;component1\u0026#34;, \u0026#34;poppy_variant\u0026#34;: \u0026#34;header-banner-full-height\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;some title\u0026#34; }, { \u0026#34;text1\u0026#34;: \u0026#34;foo\u0026#34;, \u0026#34;text2\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;text3\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;another page element\u0026#34; } ] }     Sample 3: Accordion with dynamic forms defined in a seperate file #  Configuration #  Fragments of the ./quiqr/model/base.yaml with a dynamic accordion.\n./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dynFormObjectFile: data/pageComponentsTree dynFormObjectRoot: components dynFormSearchKey: component_type fields: - arrayTitle: true key: title title: Title type: string - key: component_type multiple: false options: - text: Component 1 value: component1 - text: Component 2 value: component2 title: Component Type type: select key: page_sections title: Page sections type: accordion   dynFormObjectFile = \u0026#34;data/pageComponentsTree\u0026#34; dynFormObjectRoot = \u0026#34;components\u0026#34; dynFormSearchKey = \u0026#34;component_type\u0026#34; key = \u0026#34;page_sections\u0026#34; title = \u0026#34;Page sections\u0026#34; type = \u0026#34;accordion\u0026#34; [[fields]] arrayTitle = true key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;component_type\u0026#34; multiple = false title = \u0026#34;Component Type\u0026#34; type = \u0026#34;select\u0026#34; [[fields.options]] text = \u0026#34;Component 1\u0026#34; value = \u0026#34;component1\u0026#34; [[fields.options]] text = \u0026#34;Component 2\u0026#34; value = \u0026#34;component2\u0026#34;   { \u0026#34;dynFormObjectFile\u0026#34;: \u0026#34;data/pageComponentsTree\u0026#34;, \u0026#34;dynFormObjectRoot\u0026#34;: \u0026#34;components\u0026#34;, \u0026#34;dynFormSearchKey\u0026#34;: \u0026#34;component_type\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;arrayTitle\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;component_type\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;Component 1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;component1\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;Component 2\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;component2\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Component Type\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;page_sections\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Page sections\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;accordion\u0026#34; }     The complete object file in this case data/pageComponentsTree.yaml\ndata/pageComponentsTree. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  components: - component_type: poppy-banner fields: - key: poppy_variant multiple: false options: - text: Full height value: header-banner-full-height - text: Regular value: header-banner title: Quiqr Variant type: select - key: bg_image title: Background image type: string - key: buttontxt title: Button text type: string key: component1 - component_type: poppy-shortlist fields: - key: text1 title: Text 1 type: string - key: text2 title: Text 2 type: string - key: text3 title: Text 3 type: string groupdata: true key: component2 type: section   [[components]] component_type = \u0026#34;poppy-banner\u0026#34; key = \u0026#34;component1\u0026#34; [[components.fields]] key = \u0026#34;poppy_variant\u0026#34; multiple = false title = \u0026#34;Quiqr Variant\u0026#34; type = \u0026#34;select\u0026#34; [[components.fields.options]] text = \u0026#34;Full height\u0026#34; value = \u0026#34;header-banner-full-height\u0026#34; [[components.fields.options]] text = \u0026#34;Regular\u0026#34; value = \u0026#34;header-banner\u0026#34; [[components.fields]] key = \u0026#34;bg_image\u0026#34; title = \u0026#34;Background image\u0026#34; type = \u0026#34;string\u0026#34; [[components.fields]] key = \u0026#34;buttontxt\u0026#34; title = \u0026#34;Button text\u0026#34; type = \u0026#34;string\u0026#34; [[components]] component_type = \u0026#34;poppy-shortlist\u0026#34; groupdata = true key = \u0026#34;component2\u0026#34; type = \u0026#34;section\u0026#34; [[components.fields]] key = \u0026#34;text1\u0026#34; title = \u0026#34;Text 1\u0026#34; type = \u0026#34;string\u0026#34; [[components.fields]] key = \u0026#34;text2\u0026#34; title = \u0026#34;Text 2\u0026#34; type = \u0026#34;string\u0026#34; [[components.fields]] key = \u0026#34;text3\u0026#34; title = \u0026#34;Text 3\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;components\u0026#34;: [ { \u0026#34;component_type\u0026#34;: \u0026#34;poppy-banner\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;poppy_variant\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;Full height\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;header-banner-full-height\u0026#34; }, { \u0026#34;text\u0026#34;: \u0026#34;Regular\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;header-banner\u0026#34; } ], \u0026#34;title\u0026#34;: \u0026#34;Quiqr Variant\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;bg_image\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Background image\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;buttontxt\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Button text\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;component1\u0026#34; }, { \u0026#34;component_type\u0026#34;: \u0026#34;poppy-shortlist\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;text1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;text3\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Text 3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;component2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34; } ] }     Output #  ./data/sample. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  page_sections: - bg_image: img1.png buttontxt: ORDER NOW component_type: component1 poppy_variant: header-banner-full-height title: some title - text1: foo text2: bar text3: bar title: another page element   [[page_sections]] bg_image = \u0026#34;img1.png\u0026#34; buttontxt = \u0026#34;ORDER NOW\u0026#34; component_type = \u0026#34;component1\u0026#34; poppy_variant = \u0026#34;header-banner-full-height\u0026#34; title = \u0026#34;some title\u0026#34; [[page_sections]] text1 = \u0026#34;foo\u0026#34; text2 = \u0026#34;bar\u0026#34; text3 = \u0026#34;bar\u0026#34; title = \u0026#34;another page element\u0026#34;   { \u0026#34;page_sections\u0026#34;: [ { \u0026#34;bg_image\u0026#34;: \u0026#34;img1.png\u0026#34;, \u0026#34;buttontxt\u0026#34;: \u0026#34;ORDER NOW\u0026#34;, \u0026#34;component_type\u0026#34;: \u0026#34;component1\u0026#34;, \u0026#34;poppy_variant\u0026#34;: \u0026#34;header-banner-full-height\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;some title\u0026#34; }, { \u0026#34;text1\u0026#34;: \u0026#34;foo\u0026#34;, \u0026#34;text2\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;text3\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;another page element\u0026#34; } ] }     Sample 4: Accordion for data that is stored in an array with keys as indices (Object used as Array) #  Configuration #  Below an example of a accordion configuration with the option arrayIndicesAreKeys enabled.\n./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  arrayIndicesAreKeys: true fields: - arrayTitle: true key: title title: Title type: string - key: boolean1 title: boolean1 type: boolean - key: boolean2 title: boolean2 type: boolean - key: boolean3 title: boolean3 type: boolean key: my-accordion title: accordion type: accordion   arrayIndicesAreKeys = true key = \u0026#34;my-accordion\u0026#34; title = \u0026#34;accordion\u0026#34; type = \u0026#34;accordion\u0026#34; [[fields]] arrayTitle = true key = \u0026#34;title\u0026#34; title = \u0026#34;Title\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;boolean1\u0026#34; title = \u0026#34;boolean1\u0026#34; type = \u0026#34;boolean\u0026#34; [[fields]] key = \u0026#34;boolean2\u0026#34; title = \u0026#34;boolean2\u0026#34; type = \u0026#34;boolean\u0026#34; [[fields]] key = \u0026#34;boolean3\u0026#34; title = \u0026#34;boolean3\u0026#34; type = \u0026#34;boolean\u0026#34;   { \u0026#34;arrayIndicesAreKeys\u0026#34;: true, \u0026#34;fields\u0026#34;: [ { \u0026#34;arrayTitle\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean2\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;boolean3\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;boolean3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;my-accordion\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;accordion\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;accordion\u0026#34; }     Output #  ./data/sample. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  my-accordion: item1: boolean1: false boolean2: false boolean3: false title: some title item2: boolean1: true boolean2: false boolean3: true title: second item   [my-accordion] [my-accordion.item1] boolean1 = false boolean2 = false boolean3 = false title = \u0026#34;some title\u0026#34; [my-accordion.item2] boolean1 = true boolean2 = false boolean3 = true title = \u0026#34;second item\u0026#34;   { \u0026#34;my-accordion\u0026#34;: { \u0026#34;item1\u0026#34;: { \u0026#34;boolean1\u0026#34;: false, \u0026#34;boolean2\u0026#34;: false, \u0026#34;boolean3\u0026#34;: false, \u0026#34;title\u0026#34;: \u0026#34;some title\u0026#34; }, \u0026#34;item2\u0026#34;: { \u0026#34;boolean1\u0026#34;: true, \u0026#34;boolean2\u0026#34;: false, \u0026#34;boolean3\u0026#34;: true, \u0026#34;title\u0026#34;: \u0026#34;second item\u0026#34; } } }     "}),a.add({id:32,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/boolean/',title:"Boolean",section:"Data Field Types",content:"Boolean #  The boolean field generates a switch. The output value is true or false\n  Boolean\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: boolean   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;boolean\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }     Output #  sample_field: true "}),a.add({id:33,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/layout-field-types/bundle-image-thumbnail/',title:"Bundle image thumbnail",section:"Layout Field Types",content:"Bundle image thumbnail #  The bundle-image-thumbnail field renders a thumbnail image. It can only be used together with the bundle-manager field. Read [bundle-manager documentation](https://book.quiqr.org/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/bundle-manager/) for more information.\nProperties #     property value type optional description     key string mandatory Keys are for internal use and must be unique    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: thumb type: bundle-image-thumbnail   key = \u0026#34;thumb\u0026#34; type = \u0026#34;bundle-image-thumbnail\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;thumb\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-image-thumbnail\u0026#34; }     "}),a.add({id:34,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/bundle-manager/',title:"Bundle manager",section:"Container Field Types",content:"Bundle manager #  The bundle-manager is a container field for creating a file-manager form for managing the assets of page bundles. The word page bundle refers to Hugo\u0026rsquo;s Page Bundles. A page bundle is a way of organizing a page inside it\u0026rsquo;s own directory together with it\u0026rsquo;s resources.\nIt\u0026rsquo;s not possible to use Bundle managers with pages which are not stored as page bundle.\n  Bundle Manager together with a Bundle Image Thumbnail\n    Bundle Manager with Bundle Image Thumbnail and extra string fields\n  Bundle image thumbnail #  The bundle-image-thumbnail field is a special field to be used together with bundle-manager containers. It\u0026rsquo;s creates preview image thumbnails of selected images.\nRead [bundle-image-thumbnail documentation](https://book.quiqr.org/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/layout-field-types/bundle-image-thumbnail/) for more information.\nProperties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   path string mandatory The path to the location of the files. When the path starts with / files are stored in the directory relative to the site root directory. Without a leading / files are stored in the directory relative to the where the markdown or data file is stored.   maxItems integer optional max amount of files allowed to add   forceFileName string optional when forceFileName is set to a filename, the uploaded file is renamed to this filename including it\u0026rsquo;s extension. When forceFileName is set maxItems is automatically set to 1 NOTE, files are not converted, it\u0026rsquo;s wise to only allow the same extension   extensions array optional List of allowed filetypes   addButtonLocationTop boolean (default: false) optional Show add button on top of the widget in stead of at the bottom   fields array optional List of fields as subform    Sample 1 #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  extensions: - jpg - png - jpeg - pdf - svg fields: - key: thumb type: bundle-image-thumbnail key: images path: images title: Images type: bundle-manager   extensions = [\u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34;] key = \u0026#34;images\u0026#34; path = \u0026#34;images\u0026#34; title = \u0026#34;Images\u0026#34; type = \u0026#34;bundle-manager\u0026#34; [[fields]] key = \u0026#34;thumb\u0026#34; type = \u0026#34;bundle-image-thumbnail\u0026#34;   { \u0026#34;extensions\u0026#34;: [ \u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34; ], \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;thumb\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-image-thumbnail\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;images\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;images\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Images\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-manager\u0026#34; }     Output #  .. content/portfolio/item2 ├── images/ │ ├── backgound-image.jpg │ └── foregound-image.jpg └── index.md static/ themes/ .. Sample 2 #  This configuration looks the same but the path starts with a /\nConfiguration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  extensions: - jpg - png - jpeg - pdf - svg fields: - key: thumb type: bundle-image-thumbnail key: site_images path: /static/images title: Site Images type: bundle-manager   extensions = [\u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34;] key = \u0026#34;site_images\u0026#34; path = \u0026#34;/static/images\u0026#34; title = \u0026#34;Site Images\u0026#34; type = \u0026#34;bundle-manager\u0026#34; [[fields]] key = \u0026#34;thumb\u0026#34; type = \u0026#34;bundle-image-thumbnail\u0026#34;   { \u0026#34;extensions\u0026#34;: [ \u0026#34;jpg\u0026#34;, \u0026#34;png\u0026#34;, \u0026#34;jpeg\u0026#34;, \u0026#34;pdf\u0026#34;, \u0026#34;svg\u0026#34; ], \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;thumb\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-image-thumbnail\u0026#34; } ], \u0026#34;key\u0026#34;: \u0026#34;site_images\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/static/images\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Site Images\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bundle-manager\u0026#34; }     Output #  .. content/ static/ └── images/ ├── image1.jpg └── image2.jpg themes/ .. Known issues #  A bug currently prevents the values of input fields to be saved in the frontmatter.\n"}),a.add({id:35,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/chips/',title:"Chips",section:"Data Field Types",content:"Chips #  The chips field generates a field that helps creating tags of keywords from entered strings instantly. The output value is an array with strings.\n  Chips\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default array of strings optional (default: null) default value when the key is not set yet    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: - one - two key: sample_field title: Sample field type: chips   default = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;] key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;chips\u0026#34;   { \u0026#34;default\u0026#34;: [ \u0026#34;one\u0026#34;, \u0026#34;two\u0026#34; ], \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;chips\u0026#34; }     Output #  sample_field: - one - three Known issues #  When tip property is not working.\n"}),a.add({id:36,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/color/',title:"Color",section:"Data Field Types",content:"Color #  The color field generates a colorpicker for entering color hex codes.\n  Color picker popup\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: color   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;color\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;color\u0026#34; }     Output #  sample_field: #ccee00 "}),a.add({id:37,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/date/',title:"Date",section:"Data Field Types",content:"Date #  The date field generates a date field with a date picker. The output value is a date string.\n  Date field\n    Date picker popup\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) Default value when the key is not set yet   dateFormat string optional (default: dd/MM/yyyy Dateformat to use. only \u0026lsquo;dd\u0026rsquo; \u0026lsquo;MM\u0026rsquo; and yyyy are supported currently.    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dateFormat: dd-MM-yyyy default: \u0026#34;2021-04-12\u0026#34; key: sample_field title: Sample field type: date   dateFormat = \u0026#34;dd-MM-yyyy\u0026#34; default = \u0026#34;2021-04-12\u0026#34; key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;date\u0026#34;   { \u0026#34;dateFormat\u0026#34;: \u0026#34;dd-MM-yyyy\u0026#34;, \u0026#34;default\u0026#34;: \u0026#34;2021-04-12\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34; }     Output #  sample_field: \u0026#34;2021-03-21\u0026#34; "}),a.add({id:38,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/easymde/',title:"Easy Markdown Editor",section:"Data Field Types",content:"Easy Markdown Editor #  The easymde field generates a lightweight markdown editor for entering markdown enabled strings.\n  Easy Markdown Editor\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: easymde   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;easymde\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;easymde\u0026#34; }     Output #  sample_field: |-# Welcome at this course You will learn a lot Good luck! "}),a.add({id:39,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/eisenhouwer/',title:"Eisenhouwer Matrix",section:"Data Field Types",content:"Eisenhouwer #  Quiqr version \u0026gt;= 0.18.10\nThe eisenhouwer field creates a eisenhouwer matrix canvas which allows editors to prioritize tasks by dragging datapoints. The tasks are stored as datapoints which can optinally contain other meta data. Existing metadata will be kept and can be used in the data point label using the dataSetsDataPointLabelTemplate for configuration.\nPlease also checkout the latest kitchensink template for eisenhouwer examples. This is quite a complex datatype field.\n  Font Picker\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   xScaleTitle string optional (default: null) X-Axis Title, (cost)   yScaleTitle string optional (default: null) Y-Axis Title, (impact)   labelDoNow string optional (default: DO NOW) Quadrant top-left title   labelToPlan string optional (default: TO PLAN) Quadrant top-right title   labelDelegate string optional (default: DELEGATE) Quadrant bottom-left title   labelDelete string optional (default: DELETE) Quadrant bottom-right title   dataSetsPath string optional (default: null) Path in data where datasets are stored   dataSetsKeyToLabel boolean optional (default: false) Source data is a dictionary, convert to array for Chartjs   dataSetsLabelPath string optional (default: null) Path in data where dataset-label are stored   dataSetsDataPointsPath string optional (default: null) Path in data where datapoints are stored   dataSetsDataPointsKeyToItem boolean optional (default: false) Source data is a dictionary, convert to array for Chartjs   dataSetsDataPointPosXPath string mandatory Path in datapoints where x-position is stored   dataSetsDataPointPosYPath string mandatory Path in datapoints where y-position is stored   dataSetsDataPointLabelTemplate string optional (default: x=${point.x}, y=${point.y}) Template for creating a datapoint label    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dataSetsDataPointLabelTemplate: ${point.task} dataSetsDataPointPosXPath: .x dataSetsDataPointPosYPath: .y dataSetsDataPointsKeyToItem: false dataSetsDataPointsPath: .data dataSetsKeyToLabel: false dataSetsLabelPath: .label dataSetsPath: .datasets key: garden_tasks type: eisenhouwer xScaleTitle: More Sweat yScaleTitle: Happy Wild Life   dataSetsDataPointLabelTemplate = \u0026#34;${point.task}\u0026#34; dataSetsDataPointPosXPath = \u0026#34;.x\u0026#34; dataSetsDataPointPosYPath = \u0026#34;.y\u0026#34; dataSetsDataPointsKeyToItem = false dataSetsDataPointsPath = \u0026#34;.data\u0026#34; dataSetsKeyToLabel = false dataSetsLabelPath = \u0026#34;.label\u0026#34; dataSetsPath = \u0026#34;.datasets\u0026#34; key = \u0026#34;garden_tasks\u0026#34; type = \u0026#34;eisenhouwer\u0026#34; xScaleTitle = \u0026#34;More Sweat\u0026#34; yScaleTitle = \u0026#34;Happy Wild Life\u0026#34;   { \u0026#34;dataSetsDataPointLabelTemplate\u0026#34;: \u0026#34;${point.task}\u0026#34;, \u0026#34;dataSetsDataPointPosXPath\u0026#34;: \u0026#34;.x\u0026#34;, \u0026#34;dataSetsDataPointPosYPath\u0026#34;: \u0026#34;.y\u0026#34;, \u0026#34;dataSetsDataPointsKeyToItem\u0026#34;: false, \u0026#34;dataSetsDataPointsPath\u0026#34;: \u0026#34;.data\u0026#34;, \u0026#34;dataSetsKeyToLabel\u0026#34;: false, \u0026#34;dataSetsLabelPath\u0026#34;: \u0026#34;.label\u0026#34;, \u0026#34;dataSetsPath\u0026#34;: \u0026#34;.datasets\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;garden_tasks\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;eisenhouwer\u0026#34;, \u0026#34;xScaleTitle\u0026#34;: \u0026#34;More Sweat\u0026#34;, \u0026#34;yScaleTitle\u0026#34;: \u0026#34;Happy Wild Life\u0026#34; }     Output #  garden_tasks: datasets: - label: Garden Tasks data: - x: 12.0 \u0026#39;y\u0026#39;: 17.6 task: Paint the barn - x: 59.3 \u0026#39;y\u0026#39;: 75.5 task: Grow strawberries - x: 11.2 \u0026#39;y\u0026#39;: 79.9 task: Dig a pond Sample 2 #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  dataSetsDataPointLabelTemplate: |-${point.RiskCode} ${point.QuestionTitle} dataSetsDataPointPosXPath: .REPORT.importance_number_of_100 dataSetsDataPointPosYPath: .REPORT.cost_number_of_100 dataSetsDataPointsKeyToItem: true dataSetsKeyToLabel: true key: well_architected_improvements labelDelegate: DELEGATE labelDelete: DELETE labelDoNow: DO NOW labelToPlan: TO PLAN type: eisenhouwer xScaleTitle: Cost of Mitigation yScaleTitle: Risk Importance   dataSetsDataPointLabelTemplate = \u0026#34;${point.RiskCode}\\n${point.QuestionTitle}\u0026#34; dataSetsDataPointPosXPath = \u0026#34;.REPORT.importance_number_of_100\u0026#34; dataSetsDataPointPosYPath = \u0026#34;.REPORT.cost_number_of_100\u0026#34; dataSetsDataPointsKeyToItem = true dataSetsKeyToLabel = true key = \u0026#34;well_architected_improvements\u0026#34; labelDelegate = \u0026#34;DELEGATE\u0026#34; labelDelete = \u0026#34;DELETE\u0026#34; labelDoNow = \u0026#34;DO NOW\u0026#34; labelToPlan = \u0026#34;TO PLAN\u0026#34; type = \u0026#34;eisenhouwer\u0026#34; xScaleTitle = \u0026#34;Cost of Mitigation\u0026#34; yScaleTitle = \u0026#34;Risk Importance\u0026#34;   { \u0026#34;dataSetsDataPointLabelTemplate\u0026#34;: \u0026#34;${point.RiskCode}\\n${point.QuestionTitle}\u0026#34;, \u0026#34;dataSetsDataPointPosXPath\u0026#34;: \u0026#34;.REPORT.importance_number_of_100\u0026#34;, \u0026#34;dataSetsDataPointPosYPath\u0026#34;: \u0026#34;.REPORT.cost_number_of_100\u0026#34;, \u0026#34;dataSetsDataPointsKeyToItem\u0026#34;: true, \u0026#34;dataSetsKeyToLabel\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;well_architected_improvements\u0026#34;, \u0026#34;labelDelegate\u0026#34;: \u0026#34;DELEGATE\u0026#34;, \u0026#34;labelDelete\u0026#34;: \u0026#34;DELETE\u0026#34;, \u0026#34;labelDoNow\u0026#34;: \u0026#34;DO NOW\u0026#34;, \u0026#34;labelToPlan\u0026#34;: \u0026#34;TO PLAN\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;eisenhouwer\u0026#34;, \u0026#34;xScaleTitle\u0026#34;: \u0026#34;Cost of Mitigation\u0026#34;, \u0026#34;yScaleTitle\u0026#34;: \u0026#34;Risk Importance\u0026#34; }     Output #  well_architected_improvements: costOptimization: cloud-financial-management: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.cloud-financial-management.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: cloud-financial-management QuestionTitle: How do you implement cloud financial management? REPORT: cost_number_of_100: 76.74060382008626 importance_number_of_100: 23.400850580624386 short-med-long: short show: true Risk: MEDIUM RiskCode: COST01 _label: cloud-financial-management x: 23.400850580624386 \u0026#39;y\u0026#39;: 76.74060382008626 evaluate-cost-effort: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.evaluate-cost-effort.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: evaluate-cost-effort QuestionTitle: How do you evaluate the cost of effort? REPORT: cost_number_of_100: 57.779886148007584 importance_number_of_100: 25.392970613283993 short-med-long: long show: true Risk: MEDIUM RiskCode: COST11 _label: evaluate-cost-effort x: 25.392970613283993 \u0026#39;y\u0026#39;: 57.779886148007584 govern-usage: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.govern-usage.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: govern-usage QuestionTitle: How do you govern usage? REPORT: cost_number_of_100: 11.606578115117017 importance_number_of_100: 32.231378439747424 short-med-long: short show: true Risk: HIGH RiskCode: COST02 _label: govern-usage x: 32.231378439747424 \u0026#39;y\u0026#39;: 11.606578115117017 manage-demand-resources: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.manage-demand-resources.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: manage-demand-resources QuestionTitle: How do you manage demand, and supply resources? REPORT: cost_number_of_100: 89.52556993222429 importance_number_of_100: 9.406125135072086 short-med-long: long show: true Risk: HIGH RiskCode: COST09 _label: manage-demand-resources x: 9.406125135072086 \u0026#39;y\u0026#39;: 89.52556993222429 monitor-usage: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.monitor-usage.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: monitor-usage QuestionTitle: How do you monitor your cost and usage? REPORT: cost_number_of_100: 84.97786211258696 importance_number_of_100: 58.14894410204381 short-med-long: short show: true Risk: HIGH RiskCode: COST03 _label: monitor-usage x: 58.14894410204381 \u0026#39;y\u0026#39;: 84.97786211258696 type-size-number-resources: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.type-size-number-resources.improvement-plan.en.html ImprovementPlans: [] PillarId: costOptimization QuestionId: type-size-number-resources QuestionTitle: \u0026gt;-How do you meet cost targets when you select resource type, size and number? REPORT: cost_number_of_100: 20.517560073937158 importance_number_of_100: 5.3496829769409855 short-med-long: long show: true Risk: MEDIUM RiskCode: COST06 _label: type-size-number-resources x: 5.3496829769409855 \u0026#39;y\u0026#39;: 20.517560073937158 operationalExcellence: dev-integ: ImprovementPlanUrl: \u0026gt;- https://wa.aws.amazon.com/wellarchitected/2024-06-27T08-00-00/TypeII/en/wellarchitected/wellarchitected.dev-integ.improvement-plan.en.html ImprovementPlans: [] PillarId: operationalExcellence QuestionId: dev-integ QuestionTitle: \u0026gt;-How do you reduce defects, ease remediation, and improve flow into production? REPORT: cost_number_of_100: 69.80899568699938 importance_number_of_100: 9.473732504374272 short-med-long: short show: true Risk: MEDIUM RiskCode: OPS05 _label: dev-integ x: 9.473732504374272 \u0026#39;y\u0026#39;: 69.80899568699938 "}),a.add({id:40,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/layout-field-types/empty-line/',title:"Empty line",section:"Layout Field Types",content:"Empty line #  The empty-line field is renders 1 or more empty lines in the form. It generates no output.\n  empty line between title and description with amount: 2\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   amount integer optional (default: 1) Amount of empty lines to draw    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  amount: 2 key: sample_field type: empty-line   amount = 2 key = \u0026#34;sample_field\u0026#34; type = \u0026#34;empty-line\u0026#34;   { \u0026#34;amount\u0026#34;: 2, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;empty-line\u0026#34; }     "}),a.add({id:41,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/fonticon-picker/',title:"Font Icon Picker",section:"Data Field Types",content:"Quiqr version \u0026gt;= 0.17.5\nFont Icon Picker #  The fonticon-picker field creates a font iconpicker field populated with Font Awesome Icons. The output is a string with the Font Icon Class Name.\n  Font Picker\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: fonticon-picker   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;fonticon-picker\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fonticon-picker\u0026#34; }     Output #  sample_field: FaBusinessTime Credits #  Font Picker is based on React FA Icon Picker.\n"}),a.add({id:42,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/font-picker/',title:"Font Picker",section:"Data Field Types",content:"Font Picker #  The font-picker field creates a font picker field populated by the Google Fonts Api. The output is a string with a Font Family name.\n\n  Font Picker\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   limit integer optional (default: 50) Max. amount of fonts to load, the most populair fonts are loaded   families array of strings optional (default: null) Array with Font Family names. If set, only these fonts are loaded   categories array of strings optional (default: null) Array with Font Catogories. If set, only these fonts from these categories are loaded. \u0026ldquo;sans-serif\u0026rdquo;, \u0026ldquo;serif\u0026rdquo;, \u0026ldquo;display\u0026rdquo;, \u0026ldquo;handwriting\u0026rdquo;, \u0026ldquo;monospace\u0026rdquo;    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: roboto families: - roboto - roboto condensed - lato - open sans key: sample_field title: Sample field type: font-picker   default = \u0026#34;roboto\u0026#34; families = [\u0026#34;roboto\u0026#34;, \u0026#34;roboto condensed\u0026#34;, \u0026#34;lato\u0026#34;, \u0026#34;open sans\u0026#34;] key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;font-picker\u0026#34;   { \u0026#34;default\u0026#34;: \u0026#34;roboto\u0026#34;, \u0026#34;families\u0026#34;: [ \u0026#34;roboto\u0026#34;, \u0026#34;roboto condensed\u0026#34;, \u0026#34;lato\u0026#34;, \u0026#34;open sans\u0026#34; ], \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;font-picker\u0026#34; }     Output #  sample_field: lato Sample 2 #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  categories: - handwriting default: roboto key: sample_field limit: 40 title: Sample field type: font-picker   categories = [\u0026#34;handwriting\u0026#34;] default = \u0026#34;roboto\u0026#34; key = \u0026#34;sample_field\u0026#34; limit = 40 title = \u0026#34;Sample field\u0026#34; type = \u0026#34;font-picker\u0026#34;   { \u0026#34;categories\u0026#34;: [ \u0026#34;handwriting\u0026#34; ], \u0026#34;default\u0026#34;: \u0026#34;roboto\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;limit\u0026#34;: 40, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;font-picker\u0026#34; }     Output #  sample_field: lato Hugo Theme Template Implementation #  This is an example implementation for managing 3 fonts with Quiqr in your Hugo Theme. The video shows the result applied to the vex-theme.\nCreate a partial model file with the path SITEROOT/quiqr/model/partials/single_design.yaml Add this configuration:\n--- file: data/design.json title: Design fields: - key: \u0026quot;primary_font\u0026quot; title: \u0026quot;Main Text Font\u0026quot; type: \u0026quot;font-picker\u0026quot; tip: \u0026quot;choose your font\u0026quot; limit: 50 categories: - sans-serif - key: \u0026quot;headings_font\u0026quot; title: \u0026quot;Headings Font\u0026quot; type: \u0026quot;font-picker\u0026quot; tip: \u0026quot;choose your font\u0026quot; limit: 300 Add partial to your singles file with the path SITEROOT/quiqr/model/include/singles.yaml`\n- key: design _mergePartial: single_design Add single to your menu file with the path SITEROOT/quiqr/model/include/menu.yaml`\n- key: Settings menuItems: - key: design title: Settings Create a partial template in your hugo theme called style-fonts-import.html and include this the \u0026lt;head\u0026gt; of your Hugo Theme.\n\u0026lt;style\u0026gt; @import url('https://fonts.googleapis.com/css2?family={{ $.Site.Data.design.primary_font }}:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900\u0026amp;display=swap'); @import url('https://fonts.googleapis.com/css2?family={{ $.Site.Data.design.secondary_font }}:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900\u0026amp;display=swap'); @import url('https://fonts.googleapis.com/css2?family={{ $.Site.Data.design.headings_font }}:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900\u0026amp;display=swap'); Create a partial template in your hugo theme called style-overrides.html and include this the \u0026lt;head\u0026gt; of your Hugo Theme.\n\u0026lt;style\u0026gt; body { font-family: '{{$.Site.Data.design.primary_font }}', sans-serif; } h1, h2, h3, h4, h5, h6 { font-family: '{{ $.Site.Data.design.headings_font }}', serif; } .testimonials .testimonial-block p { font-family: '{{ $.Site.Data.design.secondary_font }}', serif; } \u0026lt;/style\u0026gt; Credits #  Font Picker is based on Font Picker React.\n"}),a.add({id:43,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/hidden/',title:"Hidden",section:"Data Field Types",content:"Hidden #  The hidden field is hidden for the user but outputs a default value.\nProperties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   default string optional default value when the key is not set yet    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: some value key: sample_field type: hidden   default = \u0026#34;some value\u0026#34; key = \u0026#34;sample_field\u0026#34; type = \u0026#34;hidden\u0026#34;   { \u0026#34;default\u0026#34;: \u0026#34;some value\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;hidden\u0026#34; }     Output #  sample_field: some value "}),a.add({id:44,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/image-select/',title:"Image Select",section:"Data Field Types",content:"Image Select #  The image-select field creates a image selector picker field. It looks in a specified path for files to select. The output is a string with the filename.\nOnly one image can be selected.\n  Image Select in form\n    Image Select dialog\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   path string mandatory The path to the location of the files. When the path starts with / files are stored in the directory relative to the site root directory. Without a leading / files are stored in the directory relative to the where the markdown or data file is stored.   real_fs_path string optional (default: null) The file system path the image. Use this e.g. when images are stored in /static/ or /assets/   buttonTitle string optional (default: \u0026ldquo;Select File\u0026rdquo;) Title of the button in the form.    Sample #  Configuration without real_fs_path #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  buttonTitle: select logo image key: sample_field path: /static/images title: Sample field type: image-select   buttonTitle = \u0026#34;select logo image\u0026#34; key = \u0026#34;sample_field\u0026#34; path = \u0026#34;/static/images\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;image-select\u0026#34;   { \u0026#34;buttonTitle\u0026#34;: \u0026#34;select logo image\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/static/images\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;image-select\u0026#34; }     frontmatter path will look like my-image.png\nConfiguration with real_fs_path (from 0.18.x) #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  buttonTitle: select logo image key: sample_field path: /images real_fs_path: /static/images title: Sample field type: image-select   buttonTitle = \u0026#34;select logo image\u0026#34; key = \u0026#34;sample_field\u0026#34; path = \u0026#34;/images\u0026#34; real_fs_path = \u0026#34;/static/images\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;image-select\u0026#34;   { \u0026#34;buttonTitle\u0026#34;: \u0026#34;select logo image\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/images\u0026#34;, \u0026#34;real_fs_path\u0026#34;: \u0026#34;/static/images\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;image-select\u0026#34; }     frontmatter path will look like /images/my-image.png\nOutput #  sample_field: logo.png "}),a.add({id:45,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/layout-field-types/info/',title:"Info",section:"Layout Field Types",content:"Info #  The info field is shows a readonly information box. It generates no output.\n  Info field\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   content string mandatory The content of the box in Markdown formatted textent   size string (normal, small, large) optional (default: normal) Fontsize of small is 85%, normal 100%, large 110%   lineHeight string optional (default: null) css value for the line height property. E.g. 150%   theme strings (default, bare, warn, warn-bare, black, black-bare, gray, gray-bare) optional: (default: default) theme used to render to info box    Themes #     theme preview     default     bare     warn     black     gray      Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  content: |-## I love \\n\\n![](https://quiqr.org/images/logo-nav.svg) * it\u0026#39;s smart * it\u0026#39;s fast * it has Quiqr One\u0026#34; key: sample_field size: small type: info   content = \u0026#34;## I love \\\\n\\\\n![](https://quiqr.org/images/logo-nav.svg)\\n\\n* it\u0026#39;s smart\\n* it\u0026#39;s fast\\n* it has Quiqr One\\\u0026#34;\u0026#34; key = \u0026#34;sample_field\u0026#34; size = \u0026#34;small\u0026#34; type = \u0026#34;info\u0026#34;   { \u0026#34;content\u0026#34;: \u0026#34;## I love \\\\n\\\\n![](https://quiqr.org/images/logo-nav.svg)\\n\\n* it\u0026#39;s smart\\n* it\u0026#39;s fast\\n* it has Quiqr One\\\u0026#34;\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;size\u0026#34;: \u0026#34;small\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;info\u0026#34; }     Output #    Info field\n  "}),a.add({id:46,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/leaf-array/',title:"Leaf array",section:"Container Field Types",content:"Leaf array #  The lead array field is a container field for a single child field. The output is a collection of values of the child field value type.\n  Leaf array with dates\n  Properties #  Bundle manager Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique.   title string optional The title of the element.   field dictionary mandatory Dictionary witg child field definition.    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  field: key: some_child_field title: Some chield field type: date key: some_parent_field title: Some parent field type: leaf-array   key = \u0026#34;some_parent_field\u0026#34; title = \u0026#34;Some parent field\u0026#34; type = \u0026#34;leaf-array\u0026#34; [field] key = \u0026#34;some_child_field\u0026#34; title = \u0026#34;Some chield field\u0026#34; type = \u0026#34;date\u0026#34;   { \u0026#34;field\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;some_child_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some chield field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34; }, \u0026#34;key\u0026#34;: \u0026#34;some_parent_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some parent field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;leaf-array\u0026#34; }     Output #  some_parent_field: - \u0026#34;2021-04-02\u0026#34; - \u0026#34;2021-04-21\u0026#34; - \u0026#34;2021-05-07\u0026#34; "}),a.add({id:47,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/markdown/',title:"Markdown",section:"Data Field Types",content:"Markdown #  The string field generates a field for entering strings. Multiline string values are allowed by enableing this property.\n  Single markdown\n    Multi line markdown\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet   preview boolean optional (default: false) Enable preview field with rendered HTML    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: markdown   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;markdown\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;markdown\u0026#34; }     Output #  sample_field: |-Some multiline string value Known issues #  The preview field is broken.\n"}),a.add({id:48,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/nest/',title:"Nest",section:"Container Field Types",content:"Nest #  The nest field is a container field. It can define multiple input fields, which are displayed as a subform. You have to focus the nest-field the show the sub form. The output is a dictionary with values from the sub form fields.\n  nest unfocussed\n    nest focussed\n  Properties #  Bundle manager Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique.   title string optional The title of the element.   fields array of dictionaries mandatory These are the subform input fields.   groupdata boolean optional (default: true) When set true to child field value are stored in a hash below the section key. When set false the values are placed at the same level as the section neighbour fields    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  fields: - key: some_child_field title: Some chield field type: date groupdata: true key: some_parent_field title: Some parent field type: nest   groupdata = true key = \u0026#34;some_parent_field\u0026#34; title = \u0026#34;Some parent field\u0026#34; type = \u0026#34;nest\u0026#34; [[fields]] key = \u0026#34;some_child_field\u0026#34; title = \u0026#34;Some chield field\u0026#34; type = \u0026#34;date\u0026#34;   { \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;some_child_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some chield field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;some_parent_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some parent field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;nest\u0026#34; }     Output #  some_parent_field: some_child_field: \u0026#34;2021-04-02\u0026#34; "}),a.add({id:49,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/number/',title:"Number",section:"Data Field Types",content:"Number #  The number field generates a field for entering numbers. Both integers and floating numbers are allowed. It\u0026rsquo;s not possible to enter othert characters.\n  Number\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: number   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;number\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }     Output #  sample_field: 13.3 "}),a.add({id:50,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/pull/',title:"Pull",section:"Container Field Types",content:"Section #  The pull field is a container field. It can define multiple input fields. The fields defined in a pull are displayed at the same level as other fields next to the pull field. The values are stored as dictionary below the pull key.\n  Example use of the pull field. The fields author and Description are show at the same level as the Title field\n  Properties #  Bundle manager Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique.   fields array of dictionaries optional These are the subform input fields.   group string optional (default: null) key to store the dictionary in. When not set, the key of the pull element itself is used.    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  fields: - key: author title: Author type: string - key: description multiLine: true title: Description type: string group: params key: some_field type: pull   group = \u0026#34;params\u0026#34; key = \u0026#34;some_field\u0026#34; type = \u0026#34;pull\u0026#34; [[fields]] key = \u0026#34;author\u0026#34; title = \u0026#34;Author\u0026#34; type = \u0026#34;string\u0026#34; [[fields]] key = \u0026#34;description\u0026#34; multiLine = true title = \u0026#34;Description\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;author\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Author\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;description\u0026#34;, \u0026#34;multiLine\u0026#34;: true, \u0026#34;title\u0026#34;: \u0026#34;Description\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;group\u0026#34;: \u0026#34;params\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;some_field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;pull\u0026#34; }     Output #  params: author: \u0026#34;Multiple authors\u0026#34; description: |-this is a nice place. "}),a.add({id:51,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/readonly/',title:"Readonly",section:"Data Field Types",content:"Readonly #  The readonly field is shows a value but cannot be modified by the form user. The value can be a string or a number.\n  Readonly\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   default string mandatory The value of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: some value key: sample_field title: Sample field type: readonly   default = \u0026#34;some value\u0026#34; key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;readonly\u0026#34;   { \u0026#34;default\u0026#34;: \u0026#34;some value\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;readonly\u0026#34; }     Output #  sample_field: some value "}),a.add({id:52,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/container-field-types/section/',title:"Section",section:"Container Field Types",content:"Section #  The section field is a container field. It can define multiple input fields, which are displayed as a sub form. The output is a dictionary with values from the sub form fields.\n  section\n  Properties #  Bundle manager Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique.   title string optional The title of the element.   fields array of dictionaries mandatory These are the subform input fields.   groupdata boolean optional (default: true) When set true to child field value are stored in a hash below the section key. When set false the values are placed at the same level as the section neighbour fields    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  fields: - key: some_child_field title: Some chield field type: date groupdata: true key: some_parent_field title: Some parent field type: section   groupdata = true key = \u0026#34;some_parent_field\u0026#34; title = \u0026#34;Some parent field\u0026#34; type = \u0026#34;section\u0026#34; [[fields]] key = \u0026#34;some_child_field\u0026#34; title = \u0026#34;Some chield field\u0026#34; type = \u0026#34;date\u0026#34;   { \u0026#34;fields\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;some_child_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some chield field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34; } ], \u0026#34;groupdata\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;some_parent_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Some parent field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34; }     Output #  some_parent_field: some_child_field: \u0026#34;2021-04-02\u0026#34; "}),a.add({id:53,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/select/',title:"Select",section:"Data Field Types",content:"Select #  The select field generates a dropdown selectbox for selecting strings or numbers. The output is a number or string. If multiple is set true the out is an array of numbers or strings.\n  Select field\n    Select multiple field\n    Select dropdown with options\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string OR number OR array of strings optional (default: null) default value when the key is not set yet   multiple boolean optional (default: false) Enable multiple selection   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   option_image_path string optional (default: null) path to images having the same name as the options values e.g. quiqr/model/images   option_image_width number optional (default: null) when option_image_path is set image width as well to have a aligned option listing   option_image_extension string optional (defaul: null) when option_image_path is set, optionally set extension to e.g. jpg. Then all images should be of type jpg.   options array of dictionaries OR array of strings mandatory Array with title/value pairs, or an array with strings when text and value are the same   options.[n].text string optional String with option visible text   options.[n].value string optional String with option value to save when selected    Example 1 #  This example shows when value and text differ\nConfiguration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: 2 key: sample_field multiple: false options: - text: Option 1 value: 1 - text: Option 2 value: 2 - text: Option 3 value: 3 title: Sample field type: select   default = 2 key = \u0026#34;sample_field\u0026#34; multiple = false title = \u0026#34;Sample field\u0026#34; type = \u0026#34;select\u0026#34; [[options]] text = \u0026#34;Option 1\u0026#34; value = 1 [[options]] text = \u0026#34;Option 2\u0026#34; value = 2 [[options]] text = \u0026#34;Option 3\u0026#34; value = 3   { \u0026#34;default\u0026#34;: 2, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;Option 1\u0026#34;, \u0026#34;value\u0026#34;: 1 }, { \u0026#34;text\u0026#34;: \u0026#34;Option 2\u0026#34;, \u0026#34;value\u0026#34;: 2 }, { \u0026#34;text\u0026#34;: \u0026#34;Option 3\u0026#34;, \u0026#34;value\u0026#34;: 3 } ], \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; }     Output #  sample_field: 2 Example 2 #  This example shows when value and text are the same\nConfiguration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: 2 key: sample_field multiple: false options: - Option 1 - Option 2 - Option 3 title: Sample field type: select   default = 2 key = \u0026#34;sample_field\u0026#34; multiple = false options = [\u0026#34;Option 1\u0026#34;, \u0026#34;Option 2\u0026#34;, \u0026#34;Option 3\u0026#34;] title = \u0026#34;Sample field\u0026#34; type = \u0026#34;select\u0026#34;   { \u0026#34;default\u0026#34;: 2, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;options\u0026#34;: [ \u0026#34;Option 1\u0026#34;, \u0026#34;Option 2\u0026#34;, \u0026#34;Option 3\u0026#34; ], \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select\u0026#34; }     Output #  sample_field: 2 Known issues #  Default property is not working.\n"}),a.add({id:54,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/select-from-query/',title:"Select from Query",section:"Data Field Types",content:"Select from Query #  Quiqr version \u0026gt;= 0.16.0\nThe select-from-query field generates a dropdown selectbox for selecting strings generated by an query string.\nIMG TODO\nProperties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string OR array of strings optional (default: null) default value when the key is not set yet   multiple boolean optional (default: false) Enable multiple selection   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   query_glob string mandatory Glob string to select one or more files   query_string string mandatory string to use on one the of the query types   option_image_path string optional (default: null) path to images having the same name as the options values e.g. quiqr/model/images   option_image_width number optional (default: null) when option_image_path is set image width as well to have a aligned option listing   option_image_extension string optional (defaul: null) when option_image_path is set, optionally set extension to e.g. jpg. Then all images should be of type jpg.    Example 1 #  This example shows a simple query.\nConfiguration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: 2 key: sample_field multiple: false query_glob: data/system_data.json query_string: .weekday[] title: Sample field type: select-from-query   default = 2 key = \u0026#34;sample_field\u0026#34; multiple = false query_glob = \u0026#34;data/system_data.json\u0026#34; query_string = \u0026#34;.weekday[]\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;select-from-query\u0026#34;   { \u0026#34;default\u0026#34;: 2, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;query_glob\u0026#34;: \u0026#34;data/system_data.json\u0026#34;, \u0026#34;query_string\u0026#34;: \u0026#34;.weekday[]\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select-from-query\u0026#34; }     Output #  options:\n Monday Tuesday \u0026hellip;  possible frontmatter result\nsample_field: Monday Example 2 #  This example shows a simple query together with image visualization.\n  Select field\n  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  default: 2 key: sample_field multiple: false option_image_extension: jpg option_image_path: ./quiqr/model/images option_image_width: 200 query_glob: data/system_data.json query_string: .weekday[] title: Sample field type: select-from-query   default = 2 key = \u0026#34;sample_field\u0026#34; multiple = false option_image_extension = \u0026#34;jpg\u0026#34; option_image_path = \u0026#34;./quiqr/model/images\u0026#34; option_image_width = 200 query_glob = \u0026#34;data/system_data.json\u0026#34; query_string = \u0026#34;.weekday[]\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;select-from-query\u0026#34;   { \u0026#34;default\u0026#34;: 2, \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;multiple\u0026#34;: false, \u0026#34;option_image_extension\u0026#34;: \u0026#34;jpg\u0026#34;, \u0026#34;option_image_path\u0026#34;: \u0026#34;./quiqr/model/images\u0026#34;, \u0026#34;option_image_width\u0026#34;: 200, \u0026#34;query_glob\u0026#34;: \u0026#34;data/system_data.json\u0026#34;, \u0026#34;query_string\u0026#34;: \u0026#34;.weekday[]\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;select-from-query\u0026#34; }     Output #  options:\n Monday Tuesday \u0026hellip;  possible frontmatter result\nsample_field: Monday Query Language #  The Quiqr Query Language is inspired by JQ, but has some additions specially suited for querying the Hugo content. Currently this page contains all information about QQL.\nQQL selects data or metadata from markdown/json/yaml/toml files.\nIn the select-from-quert field, only results in the form of arrays with strings are valid. Other results types wil produce an error message.\nAt time of writing QQL only exists in this document. QQL is in a very early development phase.\nWhen the query_string starts with # the file meta data will be queried. When the query_string starts with . the file content data will be queried.\nMeta data functions #   file_name: returns the full filename-component. e.g. blog-about-quiqr.md file_base_name: returns the filename with out extension. e.g. blog-about-quiqr parent_dir: returns the parent directory of the found filename with out extension. e.g. the-post when the filename is a bundle posts/the-post/index.md  Populating select option with filenames from a directory. #  query_glob: content/resources/*.md query_string: \u0026#34;#file_name[]\u0026#34; Populating select option with titles from front matter from multiple directories. #  query_glob: content/**/*.md query_string: .title[] Known issues #  WIP\n"}),a.add({id:55,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/slider/',title:"Slider",section:"Data Field Types",content:"Slider #  The slider field generates a slider for entering numbers.\n  slider\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   step number mandatory Amount between steps   min number mandatory Starting value   max number mandatory Ending value   autoSave boolean optional (default: false) Form data is automatically saved after changing the value   default string optional (default: null) default value when the key is not set yet   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field max: 800 min: 0 step: 10 title: Sample field type: slider   key = \u0026#34;sample_field\u0026#34; max = 800 min = 0 step = 10 title = \u0026#34;Sample field\u0026#34; type = \u0026#34;slider\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;max\u0026#34;: 800, \u0026#34;min\u0026#34;: 0, \u0026#34;step\u0026#34;: 10, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;slider\u0026#34; }     Output #  sample_field: 300 "}),a.add({id:56,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/string/',title:"String",section:"Data Field Types",content:"String #  The string field generates a field for entering strings. Multiline string values are allowed by enableing this property.\n  Single line string\n    Multi line string\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box   default string optional (default: null) default value when the key is not set yet   multiLine boolean optional (default: false) Enable multi line value   txtInsertButtons array of strings optional Array with strings of which quick text insert buttons are created    Sample 1 #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field multiLine: true title: Sample field type: string   key = \u0026#34;sample_field\u0026#34; multiLine = true title = \u0026#34;Sample field\u0026#34; type = \u0026#34;string\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;multiLine\u0026#34;: true, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }     Output #  sample_field: |-Some multiline string value Sample 2: #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field txtInsertButtons: - \u0026#34;YES\u0026#34; - \u0026#34;NO\u0026#34; - MAYBE type: string   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; txtInsertButtons = [\u0026#34;YES\u0026#34;, \u0026#34;NO\u0026#34;, \u0026#34;MAYBE\u0026#34;] type = \u0026#34;string\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;txtInsertButtons\u0026#34;: [ \u0026#34;YES\u0026#34;, \u0026#34;NO\u0026#34;, \u0026#34;MAYBE\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }     Output #  sample_field: YES "}),a.add({id:57,href:'/docs/20-quiqr-developer-reference/03-content-model/03-form-fields/data-field-types/uniq/',title:"Uniq",section:"Data Field Types",content:"Uniq #  The Uniq field is generates a unique string if the value is not set. When the value exists it behaves like a readonly string. With the generate new token button a the string can be regenerated.\n  Uniq\n  Properties #     property value type optional description     key string mandatory Keys are for internal use and must be unique   title string optional The title of the element   tip string optional (default: null) Text entered here with markdown formatting is displayed as context help in an overlay box    Sample #  Configuration #  ./quiqr/model/base. yaml\u0026nbsp; toml\u0026nbsp; json\u0026nbsp;  key: sample_field title: Sample field type: uniq   key = \u0026#34;sample_field\u0026#34; title = \u0026#34;Sample field\u0026#34; type = \u0026#34;uniq\u0026#34;   { \u0026#34;key\u0026#34;: \u0026#34;sample_field\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Sample field\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uniq\u0026#34; }     Output #  sample_field: 888c-fc97-bb50 "})})()