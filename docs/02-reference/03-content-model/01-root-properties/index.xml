<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Root properties on Documentation</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/</link><description>Recent content in Root properties on Documentation</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/index.xml" rel="self" type="application/rss+xml"/><item><title>build</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/01-build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/01-build/</guid><description>Build # The build property tells PoppyGo which Hugo configuration file should be used when the site will be build. A build occurs when a site is published.
./model/base. yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; build: - config: config.toml key: default [[build]] config = &amp;#34;config.toml&amp;#34; key = &amp;#34;default&amp;#34; { &amp;#34;build&amp;#34;: [ { &amp;#34;config&amp;#34;: &amp;#34;config.toml&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;default&amp;#34; } ] }</description></item><item><title>serve</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/02-serve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/02-serve/</guid><description>Serve # The serve property tells PoppyGo which Hugo configuration file should be used for the live preview server. The server listens to http://localhost:13131.
./model/base. yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; serve: - config: config.toml key: default [[serve]] config = &amp;#34;config.toml&amp;#34; key = &amp;#34;default&amp;#34; { &amp;#34;serve&amp;#34;: [ { &amp;#34;config&amp;#34;: &amp;#34;config.toml&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;default&amp;#34; } ] }</description></item><item><title>hugover</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/03-hugover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/03-hugover/</guid><description>hugover # The hugover property tells PoppyGo which Hugo version it should use. If the version is not available, it will automatically downloaded from the official Hugo site.
./model/base. yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; hugover: extended_0.76.5 hugover = &amp;#34;extended_0.76.5&amp;#34; { &amp;#34;hugover&amp;#34;: &amp;#34;extended_0.76.5&amp;#34; }</description></item><item><title>Menu</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/04-menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/04-menu/</guid><description>Root property: menu # The Menu main key is optional. When not defined PoppyGo creates two menu sections: Singles and Collections.
When menu is defined the default PoppyGo content navigation is overriden by this configuration.
Properties # There are the properties of a single menu dictionary.
property value type optional description key string mandatory Keys are for internal use and must be unique title string mandatory The title of this menu menuItems array of dictionaries mandatory contains a menu items Every menu item has a dictionary with.</description></item><item><title>single</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/05-singles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/05-singles/</guid><description>Root property: singles # The singles property is optional. When defined Singles containes an array of dictionaries. Every dictionary defines a single form to edit a single file. The file can be located anywhere in the site directory structure but typically points to a file in the root directory, the content directory or the data directory of a hugo project.
These are the properties of a Single dictionary.
property value type optional description key string mandatory Keys are for internal use and must be unique dataformat string: yaml, toml,json mandatory Defines the type of output format.</description></item><item><title>collections</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/06-collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/06-collections/</guid><description>Root property: collections # The collections property is optional. It can define an array with one or more collections with pages which will get their own navigation item in the PoppyGo Content Menu. In the above example there is a Collection Blog configured containing blog pages in the folder content/blog/. Below the properties of a single collection dictionary.
property value type optional description key string mandatory Keys are for internal use and must be unique dataformat string: yaml, toml,json mandatory Defines the output format of the frontmatter block.</description></item><item><title>dynamics</title><link>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/07-dynamics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poppygo.github.io/poppygo-book/docs/02-reference/03-content-model/01-root-properties/07-dynamics/</guid><description>Root property: dynamics # The dynamics property is optional. Dynamics are used to dynamically mount sub-forms in the accordion form field.
The dynamics property contains an array of dictionaries which itself it a form field definition.
Example # model/base. yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; dynamics: - component_type: banner fields: - key: bg_image title: Background image type: string - key: buttontxt title: Button text type: string key: component-banner - component_type: bullet-list fields: - key: text1 title: Text 1 type: string - key: text2 title: Text 2 type: string - key: text3 title: Text 3 type: string groupdata: true key: component-bullet-list type: section [[dynamics]] component_type = &amp;#34;banner&amp;#34; key = &amp;#34;component-banner&amp;#34; [[dynamics.</description></item></channel></rss>